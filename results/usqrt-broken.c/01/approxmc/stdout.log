** CON **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/usqrt-broken.c/01/counterSharp/con.dimacs
** AMM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/usqrt-broken.c/01/counterSharp/amm.dimacs
c -- header says num vars:           7987
c -- header says num clauses:       39012
c WARNING: Empty line at line number 39310 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 39012
c -- xor clauses added: 0
c -- vars added 7987
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    0.76 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    0.82 ] round:  0 hashes:      1
c [appmc] [    0.82 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.88 ] round:  0 hashes:      2
c [appmc] [    0.88 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.91 ] round:  0 hashes:      4
c [appmc] [    0.91 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    0.96 ] round:  0 hashes:      8
c [appmc] [    0.96 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    1.02 ] round:  0 hashes:     16
c [appmc] [    1.02 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    1.09 ] round:  0 hashes:     24
c [appmc] [    1.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    1.16 ] round:  0 hashes:     28
c [appmc] [    1.16 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [    1.17 ] round:  0 hashes:     26
c [appmc] [    1.17 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    1.18 ] round:  0 hashes:     25
c [appmc] [    1.18 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    1.28 ] round:  1 hashes:     25
c [appmc] [    1.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    1.33 ] round:  1 hashes:     24
c [appmc] [    1.33 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    1.43 ] round:  2 hashes:     25
c [appmc] [    1.43 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    1.49 ] round:  2 hashes:     24
c [appmc] [    1.49 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    1.58 ] round:  3 hashes:     25
c [appmc] [    1.58 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    1.65 ] round:  3 hashes:     26
c [appmc] [    1.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] simplifying
c [appmc] [    1.75 ] round:  4 hashes:     26
c [appmc] [    1.75 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    1.78 ] round:  4 hashes:     25
c [appmc] [    1.78 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    1.81 ] round:  4 hashes:     24
c [appmc] [    1.81 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    1.89 ] round:  5 hashes:     25
c [appmc] [    1.89 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    1.95 ] round:  5 hashes:     24
c [appmc] [    1.95 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.03 ] round:  6 hashes:     25
c [appmc] [    2.03 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.09 ] round:  6 hashes:     24
c [appmc] [    2.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.17 ] round:  7 hashes:     25
c [appmc] [    2.17 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.24 ] round:  7 hashes:     24
c [appmc] [    2.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.32 ] round:  8 hashes:     25
c [appmc] [    2.32 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.38 ] round:  8 hashes:     24
c [appmc] [    2.38 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] FINISHED ApproxMC T: 2.40 s
c [appmc] Number of solutions is: 64*2**25
s mc 2147483648
** AMH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/usqrt-broken.c/01/counterSharp/amh.dimacs
c -- header says num vars:           7987
c -- header says num clauses:       39012
c WARNING: Empty line at line number 39310 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 39012
c -- xor clauses added: 0
c -- vars added 7987
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    1.53 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    1.60 ] round:  0 hashes:      1
c [appmc] [    1.60 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    1.66 ] round:  0 hashes:      2
c [appmc] [    1.66 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    1.70 ] round:  0 hashes:      4
c [appmc] [    1.70 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.74 ] round:  0 hashes:      8
c [appmc] [    1.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    1.81 ] round:  0 hashes:     16
c [appmc] [    1.82 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    1.89 ] round:  0 hashes:     24
c [appmc] [    1.89 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    1.97 ] round:  0 hashes:     28
c [appmc] [    1.97 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [    1.97 ] round:  0 hashes:     26
c [appmc] [    1.97 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    1.98 ] round:  0 hashes:     25
c [appmc] [    1.98 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    2.09 ] round:  1 hashes:     25
c [appmc] [    2.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.15 ] round:  1 hashes:     24
c [appmc] [    2.15 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.24 ] round:  2 hashes:     25
c [appmc] [    2.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.31 ] round:  2 hashes:     24
c [appmc] [    2.31 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.40 ] round:  3 hashes:     25
c [appmc] [    2.40 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.48 ] round:  3 hashes:     26
c [appmc] [    2.48 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] simplifying
c [appmc] [    2.58 ] round:  4 hashes:     26
c [appmc] [    2.58 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    2.61 ] round:  4 hashes:     25
c [appmc] [    2.61 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.65 ] round:  4 hashes:     24
c [appmc] [    2.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.74 ] round:  5 hashes:     25
c [appmc] [    2.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.81 ] round:  5 hashes:     24
c [appmc] [    2.81 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.90 ] round:  6 hashes:     25
c [appmc] [    2.90 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.96 ] round:  6 hashes:     24
c [appmc] [    2.96 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    3.06 ] round:  7 hashes:     25
c [appmc] [    3.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    3.12 ] round:  7 hashes:     24
c [appmc] [    3.12 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    3.22 ] round:  8 hashes:     25
c [appmc] [    3.22 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    3.28 ] round:  8 hashes:     24
c [appmc] [    3.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] FINISHED ApproxMC T: 3.30 s
c [appmc] Number of solutions is: 64*2**25
s mc 2147483648
** ASM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/usqrt-broken.c/01/counterSharp/asm.dimacs
c -- header says num vars:           7989
c -- header says num clauses:       39018
c WARNING: Empty line at line number 39318 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 39018
c -- xor clauses added: 0
c -- vars added 7989
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    1.11 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    1.88 ] round:  0 hashes:      1
c [appmc] [    1.88 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    3.14 ] round:  0 hashes:      2
c [appmc] [    3.14 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    4.01 ] round:  0 hashes:      4
c [appmc] [    4.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    5.38 ] round:  0 hashes:      8
c [appmc] [    5.38 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    8.13 ] round:  0 hashes:     16
c [appmc] [    8.13 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [   10.69 ] round:  0 hashes:     24
c [appmc] [   10.69 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   10.92 ] round:  0 hashes:     20
c [appmc] [   10.92 ] bounded_sol_count looking for   81 solutions -- hashes active: 20
c [appmc] [   11.19 ] round:  0 hashes:     22
c [appmc] [   11.19 ] bounded_sol_count looking for   81 solutions -- hashes active: 22
c [appmc] [   11.42 ] round:  0 hashes:     23
c [appmc] [   11.42 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [   11.83 ] round:  1 hashes:     24
c [appmc] [   11.83 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   11.97 ] round:  1 hashes:     25
c [appmc] [   11.97 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   12.26 ] round:  2 hashes:     25
c [appmc] [   12.26 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [   12.35 ] round:  2 hashes:     24
c [appmc] [   12.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   12.45 ] round:  2 hashes:     23
c [appmc] [   12.45 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [   12.75 ] round:  3 hashes:     24
c [appmc] [   12.75 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   12.93 ] round:  3 hashes:     23
c [appmc] [   12.93 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [   13.24 ] round:  4 hashes:     24
c [appmc] [   13.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   13.41 ] round:  4 hashes:     23
c [appmc] [   13.41 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [   13.70 ] round:  5 hashes:     24
c [appmc] [   13.70 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   13.87 ] round:  5 hashes:     23
c [appmc] [   13.87 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [   14.15 ] round:  6 hashes:     24
c [appmc] [   14.15 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   14.32 ] round:  6 hashes:     23
c [appmc] [   14.32 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [   14.62 ] round:  7 hashes:     24
c [appmc] [   14.62 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   14.78 ] round:  7 hashes:     23
c [appmc] [   14.78 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [   15.08 ] round:  8 hashes:     24
c [appmc] [   15.08 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   15.24 ] round:  8 hashes:     23
c [appmc] [   15.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] FINISHED ApproxMC T: 15.33 s
c [appmc] Number of solutions is: 64*2**24
s mc 1073741824
** ASH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/usqrt-broken.c/01/counterSharp/ash.dimacs
c -- header says num vars:           7989
c -- header says num clauses:       39018
c WARNING: Empty line at line number 39318 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 39018
c -- xor clauses added: 0
c -- vars added 7989
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    1.33 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    1.46 ] round:  0 hashes:      1
c [appmc] [    1.46 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    1.57 ] round:  0 hashes:      2
c [appmc] [    1.57 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    1.66 ] round:  0 hashes:      4
c [appmc] [    1.66 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.81 ] round:  0 hashes:      8
c [appmc] [    1.81 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    2.08 ] round:  0 hashes:     16
c [appmc] [    2.08 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    2.27 ] round:  0 hashes:     24
c [appmc] [    2.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    2.40 ] round:  0 hashes:     20
c [appmc] [    2.40 ] bounded_sol_count looking for   81 solutions -- hashes active: 20
c [appmc] [    2.46 ] round:  0 hashes:     22
c [appmc] [    2.46 ] bounded_sol_count looking for   81 solutions -- hashes active: 22
c [appmc] [    2.48 ] round:  0 hashes:     23
c [appmc] [    2.48 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [    2.65 ] round:  1 hashes:     24
c [appmc] [    2.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    2.74 ] round:  1 hashes:     23
c [appmc] [    2.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [    2.96 ] round:  2 hashes:     24
c [appmc] [    2.96 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    3.07 ] round:  2 hashes:     23
c [appmc] [    3.07 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [    3.22 ] round:  3 hashes:     24
c [appmc] [    3.22 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    3.34 ] round:  3 hashes:     23
c [appmc] [    3.34 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [    3.49 ] round:  4 hashes:     24
c [appmc] [    3.49 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    3.61 ] round:  4 hashes:     23
c [appmc] [    3.61 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [    3.75 ] round:  5 hashes:     24
c [appmc] [    3.75 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    3.86 ] round:  5 hashes:     23
c [appmc] [    3.86 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [    4.00 ] round:  6 hashes:     24
c [appmc] [    4.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    4.11 ] round:  6 hashes:     23
c [appmc] [    4.11 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [    4.25 ] round:  7 hashes:     24
c [appmc] [    4.25 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    4.36 ] round:  7 hashes:     23
c [appmc] [    4.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [    4.50 ] round:  8 hashes:     24
c [appmc] [    4.50 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    4.62 ] round:  8 hashes:     23
c [appmc] [    4.62 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] FINISHED ApproxMC T: 4.65 s
c [appmc] Number of solutions is: 64*2**24
s mc 1073741824
