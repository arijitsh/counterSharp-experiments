** CON **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/hhk2008-2.c/03/counterSharp/con.dimacs
c -- header says num vars:          97501
c -- header says num clauses:      480305
c WARNING: Empty line at line number 482326 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 480305
c -- xor clauses added: 0
c -- vars added 97501
c [appmc] Sampling set size: 64
c [appmc] Sampling set: 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 
c [sparse] Using match: 1 sampling set size: 64 prev end inclusive is: 50 this end inclusive is: 100 next end inclusive is: 150 sampl size: 64
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    7.79 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Did not find at least threshold+1 (80) we found only 0, i.e. we got exact count
c [appmc] Formula was UNSAT 
c [appmc] FINISHED ApproxMC T: 8.86 s
c [appmc] Formula was UNSAT 
c [appmc] Number of solutions is: 0*2**0
s mc 0
** AMM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/hhk2008-2.c/03/counterSharp/amm.dimacs
c -- header says num vars:          96594
c -- header says num clauses:      477145
c WARNING: Empty line at line number 479168 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 477145
c -- xor clauses added: 0
c -- vars added 96594
c [appmc] Sampling set size: 64
c [appmc] Sampling set: 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 
c [sparse] Using match: 1 sampling set size: 64 prev end inclusive is: 50 this end inclusive is: 100 next end inclusive is: 150 sampl size: 64
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    8.57 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    9.19 ] round:  0 hashes:      1
c [appmc] [    9.19 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    9.82 ] round:  0 hashes:      2
c [appmc] [    9.82 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [   10.06 ] round:  0 hashes:      4
c [appmc] [   10.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [   10.55 ] round:  0 hashes:      8
c [appmc] [   10.55 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [   11.15 ] round:  0 hashes:     16
c [appmc] [   11.15 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [   11.79 ] round:  0 hashes:     32
c [appmc] [   11.79 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [   12.45 ] round:  0 hashes:     48
c [appmc] [   12.45 ] bounded_sol_count looking for   81 solutions -- hashes active: 48
c [appmc] [   13.10 ] round:  0 hashes:     56
c [appmc] [   13.10 ] bounded_sol_count looking for   81 solutions -- hashes active: 56
c [appmc] [   13.10 ] round:  0 hashes:     52
c [appmc] [   13.10 ] bounded_sol_count looking for   81 solutions -- hashes active: 52
c [appmc] [   13.10 ] round:  0 hashes:     50
c [appmc] [   13.10 ] bounded_sol_count looking for   81 solutions -- hashes active: 50
c [appmc] [   13.58 ] round:  0 hashes:     51
c [appmc] [   13.58 ] bounded_sol_count looking for   81 solutions -- hashes active: 51
c [appmc] simplifying
c [appmc] [   13.60 ] round:  1 hashes:     51
c [appmc] [   13.60 ] bounded_sol_count looking for   81 solutions -- hashes active: 51
c [appmc] [   14.25 ] round:  1 hashes:     52
c [appmc] [   14.25 ] bounded_sol_count looking for   81 solutions -- hashes active: 52
c [appmc] [   14.60 ] round:  1 hashes:     53
c [appmc] [   14.60 ] bounded_sol_count looking for   81 solutions -- hashes active: 53
c [appmc] [   14.97 ] round:  1 hashes:     54
c [appmc] [   14.97 ] bounded_sol_count looking for   81 solutions -- hashes active: 54
c [appmc] [   15.35 ] round:  1 hashes:     56
c [appmc] [   15.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 56
c [appmc] [   15.87 ] round:  1 hashes:     60
c [appmc] [   15.87 ] bounded_sol_count looking for   81 solutions -- hashes active: 60
c [appmc] [   15.97 ] round:  1 hashes:     58
c [appmc] [   15.97 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [   16.24 ] round:  1 hashes:     57
c [appmc] [   16.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [   16.26 ] round:  2 hashes:     58
c [appmc] [   16.26 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [   16.79 ] round:  2 hashes:     57
c [appmc] [   16.79 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [   16.95 ] round:  3 hashes:     58
c [appmc] [   16.95 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [   17.48 ] round:  3 hashes:     57
c [appmc] [   17.48 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [   17.64 ] round:  4 hashes:     58
c [appmc] [   17.64 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [   18.18 ] round:  4 hashes:     57
c [appmc] [   18.18 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [   18.34 ] round:  5 hashes:     58
c [appmc] [   18.34 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [   18.88 ] round:  5 hashes:     57
c [appmc] [   18.88 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [   19.04 ] round:  6 hashes:     58
c [appmc] [   19.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [   19.59 ] round:  6 hashes:     57
c [appmc] [   19.59 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [   19.76 ] round:  7 hashes:     58
c [appmc] [   19.76 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [   20.31 ] round:  7 hashes:     57
c [appmc] [   20.31 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [   20.48 ] round:  8 hashes:     58
c [appmc] [   20.48 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [   21.03 ] round:  8 hashes:     57
c [appmc] [   21.03 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] FINISHED ApproxMC T: 21.18 s
c [appmc] Number of solutions is: 8192*2**51
s mc 18446744073709551616
** AMH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/hhk2008-2.c/03/counterSharp/amh.dimacs
c -- header says num vars:          96594
c -- header says num clauses:      477145
c WARNING: Empty line at line number 479168 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 477145
c -- xor clauses added: 0
c -- vars added 96594
c [appmc] Sampling set size: 64
c [appmc] Sampling set: 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 
c [sparse] Using match: 1 sampling set size: 64 prev end inclusive is: 50 this end inclusive is: 100 next end inclusive is: 150 sampl size: 64
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [   10.18 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [   11.58 ] round:  0 hashes:      1
c [appmc] [   11.58 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [   12.95 ] round:  0 hashes:      2
c [appmc] [   12.95 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [   27.61 ] round:  0 hashes:      4
c [appmc] [   27.61 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [   48.36 ] round:  0 hashes:      8
c [appmc] [   48.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [   73.75 ] round:  0 hashes:     16
c [appmc] [   73.75 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [   88.24 ] round:  0 hashes:     12
c [appmc] [   88.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 12
c [appmc] [  101.14 ] round:  0 hashes:     14
c [appmc] [  101.14 ] bounded_sol_count looking for   81 solutions -- hashes active: 14
c [appmc] [  106.56 ] round:  0 hashes:     13
c [appmc] [  106.56 ] bounded_sol_count looking for   81 solutions -- hashes active: 13
c [appmc] simplifying
c [appmc] [  118.49 ] round:  1 hashes:     14
c [appmc] [  118.49 ] bounded_sol_count looking for   81 solutions -- hashes active: 14
c [appmc] [  149.69 ] round:  1 hashes:     13
c [appmc] [  149.69 ] bounded_sol_count looking for   81 solutions -- hashes active: 13
c [appmc] simplifying
c [appmc] [  166.65 ] round:  2 hashes:     14
c [appmc] [  166.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 14
c [appmc] [  189.87 ] round:  2 hashes:     13
c [appmc] [  189.87 ] bounded_sol_count looking for   81 solutions -- hashes active: 13
c [appmc] simplifying
c [appmc] [  205.05 ] round:  3 hashes:     14
c [appmc] [  205.05 ] bounded_sol_count looking for   81 solutions -- hashes active: 14
c [appmc] [  227.54 ] round:  3 hashes:     13
c [appmc] [  227.54 ] bounded_sol_count looking for   81 solutions -- hashes active: 13
c [appmc] simplifying
c [appmc] [  245.79 ] round:  4 hashes:     14
c [appmc] [  245.79 ] bounded_sol_count looking for   81 solutions -- hashes active: 14
c [appmc] [  266.95 ] round:  4 hashes:     13
c [appmc] [  266.95 ] bounded_sol_count looking for   81 solutions -- hashes active: 13
c [appmc] simplifying
c [appmc] [  283.23 ] round:  5 hashes:     14
c [appmc] [  283.23 ] bounded_sol_count looking for   81 solutions -- hashes active: 14
** ASM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/hhk2008-2.c/03/counterSharp/asm.dimacs
c -- header says num vars:          96596
c -- header says num clauses:      477151
c WARNING: Empty line at line number 479176 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 477151
c -- xor clauses added: 0
c -- vars added 96596
c [appmc] Sampling set size: 64
c [appmc] Sampling set: 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 
c [sparse] Using match: 1 sampling set size: 64 prev end inclusive is: 50 this end inclusive is: 100 next end inclusive is: 150 sampl size: 64
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [   10.26 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [   63.04 ] round:  0 hashes:      1
c [appmc] [   63.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [  140.36 ] round:  0 hashes:      2
c [appmc] [  140.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [  198.73 ] round:  0 hashes:      4
c [appmc] [  198.73 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [  291.37 ] round:  0 hashes:      8
c [appmc] [  291.37 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
** ASH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/hhk2008-2.c/03/counterSharp/ash.dimacs
c -- header says num vars:          96596
c -- header says num clauses:      477151
c WARNING: Empty line at line number 479176 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 477151
c -- xor clauses added: 0
c -- vars added 96596
c [appmc] Sampling set size: 64
c [appmc] Sampling set: 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 
c [sparse] Using match: 1 sampling set size: 64 prev end inclusive is: 50 this end inclusive is: 100 next end inclusive is: 150 sampl size: 64
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [   10.31 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [   20.47 ] round:  0 hashes:      1
c [appmc] [   20.47 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [   34.03 ] round:  0 hashes:      2
c [appmc] [   34.03 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [   48.55 ] round:  0 hashes:      4
c [appmc] [   48.55 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [   68.19 ] round:  0 hashes:      8
c [appmc] [   68.19 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [   91.08 ] round:  0 hashes:     16
c [appmc] [   91.08 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [  102.99 ] round:  0 hashes:     12
c [appmc] [  102.99 ] bounded_sol_count looking for   81 solutions -- hashes active: 12
c [appmc] [  121.75 ] round:  0 hashes:     14
c [appmc] [  121.75 ] bounded_sol_count looking for   81 solutions -- hashes active: 14
c [appmc] [  124.59 ] round:  0 hashes:     13
c [appmc] [  124.59 ] bounded_sol_count looking for   81 solutions -- hashes active: 13
c [appmc] simplifying
c [appmc] [  135.68 ] round:  1 hashes:     13
c [appmc] [  135.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 13
c [appmc] [  161.64 ] round:  1 hashes:     12
c [appmc] [  161.64 ] bounded_sol_count looking for   81 solutions -- hashes active: 12
c [appmc] simplifying
c [appmc] [  178.20 ] round:  2 hashes:     13
c [appmc] [  178.20 ] bounded_sol_count looking for   81 solutions -- hashes active: 13
c [appmc] [  179.57 ] round:  2 hashes:     12
c [appmc] [  179.57 ] bounded_sol_count looking for   81 solutions -- hashes active: 12
c [appmc] [  179.57 ] round:  2 hashes:     11
c [appmc] [  179.57 ] bounded_sol_count looking for   81 solutions -- hashes active: 11
c [appmc] simplifying
c [appmc] [  200.21 ] round:  3 hashes:     12
c [appmc] [  200.21 ] bounded_sol_count looking for   81 solutions -- hashes active: 12
c [appmc] [  226.98 ] round:  3 hashes:     13
c [appmc] [  226.98 ] bounded_sol_count looking for   81 solutions -- hashes active: 13
c [appmc] simplifying
c [appmc] [  263.69 ] round:  4 hashes:     13
c [appmc] [  263.69 ] bounded_sol_count looking for   81 solutions -- hashes active: 13
c [appmc] [  288.92 ] round:  4 hashes:     12
c [appmc] [  288.92 ] bounded_sol_count looking for   81 solutions -- hashes active: 12
c [appmc] simplifying
