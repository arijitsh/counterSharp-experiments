** CON **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 02 /experiments/results/rangesum07.c/02/counterSharp/con.dimacs
** AMM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 02 /experiments/results/rangesum07.c/02/counterSharp/amm.dimacs
** AMH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 02 /experiments/results/rangesum07.c/02/counterSharp/amh.dimacs
c -- header says num vars:           5953
c -- header says num clauses:       23234
c WARNING: Empty line at line number 23315 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 23234
c -- xor clauses added: 0
c -- vars added 5953
c [appmc] Sampling set size: 224
c [appmc] Sampling var set contains over 100 variables, not displaying
c [sparse] Using match: 4 sampling set size: 224 prev end inclusive is: 200 this end inclusive is: 250 next end inclusive is: 300 sampl size: 224
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    0.19 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    0.23 ] round:  0 hashes:      1
c [appmc] [    0.23 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.27 ] round:  0 hashes:      2
c [appmc] [    0.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.29 ] round:  0 hashes:      4
c [appmc] [    0.29 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    0.34 ] round:  0 hashes:      8
c [appmc] [    0.34 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    0.39 ] round:  0 hashes:     16
c [appmc] [    0.39 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    0.48 ] round:  0 hashes:     32
c [appmc] [    0.48 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [    0.60 ] round:  0 hashes:     64
c [appmc] [    0.60 ] bounded_sol_count looking for   81 solutions -- hashes active: 64
c [appmc] [    0.77 ] round:  0 hashes:    128
c [appmc] [    0.77 ] bounded_sol_count looking for   81 solutions -- hashes active: 128
c [appmc] [    1.01 ] round:  0 hashes:    176
c [appmc] [    1.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 176
c [appmc] [    1.27 ] round:  0 hashes:    200
c [appmc] [    1.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 200
c [appmc] [    1.54 ] round:  0 hashes:    212
c [appmc] [    1.54 ] bounded_sol_count looking for   81 solutions -- hashes active: 212
c [appmc] [    1.80 ] round:  0 hashes:    218
c [appmc] [    1.80 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    2.02 ] round:  0 hashes:    215
c [appmc] [    2.02 ] bounded_sol_count looking for   81 solutions -- hashes active: 215
c [appmc] [    2.04 ] round:  0 hashes:    216
c [appmc] [    2.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 216
c [appmc] [    2.07 ] round:  0 hashes:    217
c [appmc] [    2.07 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    2.27 ] round:  1 hashes:    218
c [appmc] [    2.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    2.42 ] round:  1 hashes:    217
c [appmc] [    2.42 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    2.61 ] round:  2 hashes:    218
c [appmc] [    2.61 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    2.80 ] round:  2 hashes:    217
c [appmc] [    2.80 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    3.02 ] round:  3 hashes:    218
c [appmc] [    3.02 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    3.24 ] round:  3 hashes:    217
c [appmc] [    3.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    3.48 ] round:  4 hashes:    218
c [appmc] [    3.48 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    3.75 ] round:  4 hashes:    217
c [appmc] [    3.75 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    3.98 ] round:  5 hashes:    218
c [appmc] [    3.98 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    4.30 ] round:  5 hashes:    217
c [appmc] [    4.30 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    4.54 ] round:  6 hashes:    218
c [appmc] [    4.54 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    4.90 ] round:  6 hashes:    217
c [appmc] [    4.90 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    5.16 ] round:  7 hashes:    218
c [appmc] [    5.16 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    5.56 ] round:  7 hashes:    217
c [appmc] [    5.56 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    5.83 ] round:  8 hashes:    218
c [appmc] [    5.84 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    6.27 ] round:  8 hashes:    217
c [appmc] [    6.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] FINISHED ApproxMC T: 6.40 s
c [appmc] Number of solutions is: 64*2**218
s mc 26959946667150639794667015087019630673637144422540572481103610249216
** ASM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 02 /experiments/results/rangesum07.c/02/counterSharp/asm.dimacs
c -- header says num vars:           5954
c -- header says num clauses:       23237
c WARNING: Empty line at line number 23319 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 23237
c -- xor clauses added: 0
c -- vars added 5954
c [appmc] Sampling set size: 224
c [appmc] Sampling var set contains over 100 variables, not displaying
c [sparse] Using match: 4 sampling set size: 224 prev end inclusive is: 200 this end inclusive is: 250 next end inclusive is: 300 sampl size: 224
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    0.19 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    0.24 ] round:  0 hashes:      1
c [appmc] [    0.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.29 ] round:  0 hashes:      2
c [appmc] [    0.29 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.32 ] round:  0 hashes:      4
c [appmc] [    0.32 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    0.36 ] round:  0 hashes:      8
c [appmc] [    0.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    0.42 ] round:  0 hashes:     16
c [appmc] [    0.42 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    0.51 ] round:  0 hashes:     32
c [appmc] [    0.51 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [    0.65 ] round:  0 hashes:     64
c [appmc] [    0.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 64
c [appmc] [    0.84 ] round:  0 hashes:    128
c [appmc] [    0.84 ] bounded_sol_count looking for   81 solutions -- hashes active: 128
c [appmc] [    1.09 ] round:  0 hashes:    176
c [appmc] [    1.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 176
c [appmc] [    1.37 ] round:  0 hashes:    200
c [appmc] [    1.37 ] bounded_sol_count looking for   81 solutions -- hashes active: 200
c [appmc] [    1.64 ] round:  0 hashes:    212
c [appmc] [    1.64 ] bounded_sol_count looking for   81 solutions -- hashes active: 212
c [appmc] [    1.92 ] round:  0 hashes:    218
c [appmc] [    1.92 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    2.14 ] round:  0 hashes:    215
c [appmc] [    2.14 ] bounded_sol_count looking for   81 solutions -- hashes active: 215
c [appmc] [    2.18 ] round:  0 hashes:    216
c [appmc] [    2.18 ] bounded_sol_count looking for   81 solutions -- hashes active: 216
c [appmc] [    2.23 ] round:  0 hashes:    217
c [appmc] [    2.23 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    2.48 ] round:  1 hashes:    218
c [appmc] [    2.48 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    2.63 ] round:  1 hashes:    217
c [appmc] [    2.63 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    2.86 ] round:  2 hashes:    218
c [appmc] [    2.86 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    3.06 ] round:  2 hashes:    217
c [appmc] [    3.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    3.29 ] round:  3 hashes:    218
c [appmc] [    3.29 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    3.53 ] round:  3 hashes:    217
c [appmc] [    3.53 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    3.77 ] round:  4 hashes:    218
c [appmc] [    3.77 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    4.06 ] round:  4 hashes:    217
c [appmc] [    4.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    4.31 ] round:  5 hashes:    218
c [appmc] [    4.31 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    4.64 ] round:  5 hashes:    217
c [appmc] [    4.64 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    4.91 ] round:  6 hashes:    218
c [appmc] [    4.91 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    5.28 ] round:  6 hashes:    217
c [appmc] [    5.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    5.57 ] round:  7 hashes:    218
c [appmc] [    5.57 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    5.98 ] round:  7 hashes:    217
c [appmc] [    5.98 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] simplifying
c [appmc] [    6.28 ] round:  8 hashes:    218
c [appmc] [    6.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 218
c [appmc] [    6.73 ] round:  8 hashes:    217
c [appmc] [    6.73 ] bounded_sol_count looking for   81 solutions -- hashes active: 217
c [appmc] FINISHED ApproxMC T: 6.85 s
c [appmc] Number of solutions is: 64*2**218
s mc 26959946667150639794667015087019630673637144422540572481103610249216
** ASH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 02 /experiments/results/rangesum07.c/02/counterSharp/ash.dimacs
c -- header says num vars:           5954
c -- header says num clauses:       23237
c WARNING: Empty line at line number 23319 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 23237
c -- xor clauses added: 0
c -- vars added 5954
c [appmc] Sampling set size: 224
c [appmc] Sampling var set contains over 100 variables, not displaying
c [sparse] Using match: 4 sampling set size: 224 prev end inclusive is: 200 this end inclusive is: 250 next end inclusive is: 300 sampl size: 224
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    0.20 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    0.24 ] round:  0 hashes:      1
c [appmc] [    0.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.28 ] round:  0 hashes:      2
c [appmc] [    0.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.30 ] round:  0 hashes:      4
c [appmc] [    0.30 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    0.35 ] round:  0 hashes:      8
c [appmc] [    0.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    0.41 ] round:  0 hashes:     16
c [appmc] [    0.41 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    0.50 ] round:  0 hashes:     32
c [appmc] [    0.50 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [    0.65 ] round:  0 hashes:     64
c [appmc] [    0.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 64
c [appmc] [    1.10 ] round:  0 hashes:    128
c [appmc] [    1.10 ] bounded_sol_count looking for   81 solutions -- hashes active: 128
c [appmc] [   16.40 ] round:  0 hashes:    176
c [appmc] [   16.40 ] bounded_sol_count looking for   81 solutions -- hashes active: 176
