** CON **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 04 /experiments/results/bwd_loop2-2.c/04/counterSharp/con.dimacs
** AMM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 04 /experiments/results/bwd_loop2-2.c/04/counterSharp/amm.dimacs
c -- header says num vars:           6437
c -- header says num clauses:       22246
c WARNING: Empty line at line number 22359 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 22246
c -- xor clauses added: 0
c -- vars added 6437
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    3.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    3.09 ] round:  0 hashes:      1
c [appmc] [    3.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    3.16 ] round:  0 hashes:      2
c [appmc] [    3.16 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    3.25 ] round:  0 hashes:      4
c [appmc] [    3.25 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    3.44 ] round:  0 hashes:      8
c [appmc] [    3.44 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    3.74 ] round:  0 hashes:     16
c [appmc] [    3.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    4.08 ] round:  0 hashes:     24
c [appmc] [    4.08 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    4.41 ] round:  0 hashes:     28
c [appmc] [    4.41 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [    4.44 ] round:  0 hashes:     26
c [appmc] [    4.44 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    4.64 ] round:  0 hashes:     25
c [appmc] [    4.64 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   10.93 ] round:  1 hashes:     26
c [appmc] [   10.93 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   11.18 ] round:  1 hashes:     25
c [appmc] [   11.18 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   13.59 ] round:  2 hashes:     26
c [appmc] [   13.59 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   13.84 ] round:  2 hashes:     25
c [appmc] [   13.84 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   20.61 ] round:  3 hashes:     26
c [appmc] [   20.61 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   20.90 ] round:  3 hashes:     25
c [appmc] [   20.90 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   27.94 ] round:  4 hashes:     26
c [appmc] [   27.94 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   28.20 ] round:  4 hashes:     25
c [appmc] [   28.20 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   35.43 ] round:  5 hashes:     26
c [appmc] [   35.43 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   35.68 ] round:  5 hashes:     25
c [appmc] [   35.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   41.58 ] round:  6 hashes:     26
c [appmc] [   41.58 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   41.82 ] round:  6 hashes:     25
c [appmc] [   41.82 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   49.25 ] round:  7 hashes:     26
c [appmc] [   49.25 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   49.51 ] round:  7 hashes:     25
c [appmc] [   49.51 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   53.43 ] round:  8 hashes:     26
c [appmc] [   53.43 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   53.69 ] round:  8 hashes:     25
c [appmc] [   53.69 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] FINISHED ApproxMC T: 53.75 s
c [appmc] Number of solutions is: 64*2**26
s mc 4294967296
** AMH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 04 /experiments/results/bwd_loop2-2.c/04/counterSharp/amh.dimacs
c -- header says num vars:           6437
c -- header says num clauses:       22246
c WARNING: Empty line at line number 22359 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 22246
c -- xor clauses added: 0
c -- vars added 6437
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    1.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    1.31 ] round:  0 hashes:      1
c [appmc] [    1.31 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    1.34 ] round:  0 hashes:      2
c [appmc] [    1.34 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    1.36 ] round:  0 hashes:      4
c [appmc] [    1.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.38 ] round:  0 hashes:      3
c [appmc] [    1.38 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.64 ] round:  1 hashes:      4
c [appmc] [    1.64 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.67 ] round:  1 hashes:      3
c [appmc] [    1.67 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.80 ] round:  2 hashes:      4
c [appmc] [    1.80 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.83 ] round:  2 hashes:      3
c [appmc] [    1.83 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.04 ] round:  3 hashes:      4
c [appmc] [    2.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.07 ] round:  3 hashes:      3
c [appmc] [    2.07 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.18 ] round:  4 hashes:      4
c [appmc] [    2.18 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.21 ] round:  4 hashes:      3
c [appmc] [    2.21 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.35 ] round:  5 hashes:      4
c [appmc] [    2.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.38 ] round:  5 hashes:      3
c [appmc] [    2.38 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.53 ] round:  6 hashes:      4
c [appmc] [    2.53 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.56 ] round:  6 hashes:      3
c [appmc] [    2.56 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.72 ] round:  7 hashes:      4
c [appmc] [    2.72 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.75 ] round:  7 hashes:      3
c [appmc] [    2.75 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.87 ] round:  8 hashes:      4
c [appmc] [    2.87 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.90 ] round:  8 hashes:      3
c [appmc] [    2.90 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] FINISHED ApproxMC T: 2.91 s
c [appmc] Number of solutions is: 62*2**4
s mc 992
** ASM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 04 /experiments/results/bwd_loop2-2.c/04/counterSharp/asm.dimacs
c -- header says num vars:           6439
c -- header says num clauses:       22252
c WARNING: Empty line at line number 22367 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 22252
c -- xor clauses added: 0
c -- vars added 6439
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    1.31 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    1.35 ] round:  0 hashes:      1
c [appmc] [    1.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    1.38 ] round:  0 hashes:      2
c [appmc] [    1.38 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    1.40 ] round:  0 hashes:      4
c [appmc] [    1.40 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.42 ] round:  0 hashes:      3
c [appmc] [    1.42 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.68 ] round:  1 hashes:      4
c [appmc] [    1.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.71 ] round:  1 hashes:      3
c [appmc] [    1.71 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.87 ] round:  2 hashes:      4
c [appmc] [    1.87 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.90 ] round:  2 hashes:      3
c [appmc] [    1.90 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.08 ] round:  3 hashes:      4
c [appmc] [    2.08 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.11 ] round:  3 hashes:      3
c [appmc] [    2.11 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.28 ] round:  4 hashes:      4
c [appmc] [    2.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.31 ] round:  4 hashes:      3
c [appmc] [    2.31 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.52 ] round:  5 hashes:      4
c [appmc] [    2.52 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.55 ] round:  5 hashes:      3
c [appmc] [    2.55 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.74 ] round:  6 hashes:      4
c [appmc] [    2.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.77 ] round:  6 hashes:      3
c [appmc] [    2.77 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.91 ] round:  7 hashes:      4
c [appmc] [    2.91 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.95 ] round:  7 hashes:      3
c [appmc] [    2.95 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    3.14 ] round:  8 hashes:      4
c [appmc] [    3.14 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    3.17 ] round:  8 hashes:      3
c [appmc] [    3.17 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] FINISHED ApproxMC T: 3.18 s
c [appmc] Number of solutions is: 62*2**4
s mc 992
** ASH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 04 /experiments/results/bwd_loop2-2.c/04/counterSharp/ash.dimacs
c -- header says num vars:           6439
c -- header says num clauses:       22252
c WARNING: Empty line at line number 22367 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 22252
c -- xor clauses added: 0
c -- vars added 6439
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    1.53 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Did not find at least threshold+1 (80) we found only 6, i.e. we got exact count
c [appmc] FINISHED ApproxMC T: 1.53 s
c [appmc] Number of solutions is: 6*2**0
s mc 6
