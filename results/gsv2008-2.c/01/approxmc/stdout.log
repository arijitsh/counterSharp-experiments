** CON **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Apr  5 2021 16:42:43
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Apr  5 2021 16:41:55
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/gsv2008-2.c/01/counterSharp/con.dimacs
c -- header says num vars:          18845
c -- header says num clauses:       94279
c WARNING: Empty line at line number 94691 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 94279
c -- xor clauses added: 0
c -- vars added 18845
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    7.50 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Did not find at least threshold+1 (80) we found only 0, i.e. we got exact count
c [appmc] Formula was UNSAT 
c [appmc] FINISHED ApproxMC T: 7.53 s
c [appmc] Formula was UNSAT 
c [appmc] Number of solutions is: 0*2**0
s mc 0
** AMM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Apr  5 2021 16:42:43
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Apr  5 2021 16:41:55
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/gsv2008-2.c/01/counterSharp/amm.dimacs
c -- header says num vars:          18740
c -- header says num clauses:       93926
c WARNING: Empty line at line number 94340 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 93926
c -- xor clauses added: 0
c -- vars added 18740
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [   10.59 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [   10.91 ] round:  0 hashes:      1
c [appmc] [   10.91 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [   11.36 ] round:  0 hashes:      2
c [appmc] [   11.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [   11.66 ] round:  0 hashes:      4
c [appmc] [   11.66 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [   12.13 ] round:  0 hashes:      8
c [appmc] [   12.13 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [   12.70 ] round:  0 hashes:     16
c [appmc] [   12.70 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [   13.36 ] round:  0 hashes:     24
c [appmc] [   13.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   14.03 ] round:  0 hashes:     28
c [appmc] [   14.03 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [   14.17 ] round:  0 hashes:     26
c [appmc] [   14.17 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   14.46 ] round:  0 hashes:     25
c [appmc] [   14.46 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   22.66 ] round:  1 hashes:     26
c [appmc] [   22.66 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   23.17 ] round:  1 hashes:     25
c [appmc] [   23.17 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   31.75 ] round:  2 hashes:     26
c [appmc] [   31.75 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   32.29 ] round:  2 hashes:     25
c [appmc] [   32.29 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   40.91 ] round:  3 hashes:     26
c [appmc] [   40.91 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   41.45 ] round:  3 hashes:     25
c [appmc] [   41.45 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   50.36 ] round:  4 hashes:     26
c [appmc] [   50.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   50.91 ] round:  4 hashes:     25
c [appmc] [   50.91 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   59.32 ] round:  5 hashes:     26
c [appmc] [   59.32 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   59.86 ] round:  5 hashes:     25
c [appmc] [   59.86 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   68.59 ] round:  6 hashes:     26
c [appmc] [   68.59 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   69.13 ] round:  6 hashes:     25
c [appmc] [   69.13 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   78.43 ] round:  7 hashes:     26
c [appmc] [   78.43 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   78.98 ] round:  7 hashes:     25
c [appmc] [   78.98 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   88.28 ] round:  8 hashes:     26
c [appmc] [   88.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   88.79 ] round:  8 hashes:     25
c [appmc] [   88.79 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] FINISHED ApproxMC T: 88.92 s
c [appmc] Number of solutions is: 64*2**26
s mc 4294967296
** AMH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Apr  5 2021 16:42:43
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Apr  5 2021 16:41:55
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/gsv2008-2.c/01/counterSharp/amh.dimacs
c -- header says num vars:          18740
c -- header says num clauses:       93926
c WARNING: Empty line at line number 94340 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 93926
c -- xor clauses added: 0
c -- vars added 18740
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    8.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    8.43 ] round:  0 hashes:      1
c [appmc] [    8.43 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    8.79 ] round:  0 hashes:      2
c [appmc] [    8.79 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    8.99 ] round:  0 hashes:      4
c [appmc] [    8.99 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    9.04 ] round:  0 hashes:      3
c [appmc] [    9.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [   18.54 ] round:  1 hashes:      3
c [appmc] [   18.54 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   18.83 ] round:  1 hashes:      2
c [appmc] [   18.83 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   27.29 ] round:  2 hashes:      3
c [appmc] [   27.29 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   27.58 ] round:  2 hashes:      2
c [appmc] [   27.58 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   38.08 ] round:  3 hashes:      3
c [appmc] [   38.08 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   38.33 ] round:  3 hashes:      2
c [appmc] [   38.33 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   47.25 ] round:  4 hashes:      3
c [appmc] [   47.25 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   47.46 ] round:  4 hashes:      2
c [appmc] [   47.46 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   54.47 ] round:  5 hashes:      3
c [appmc] [   54.47 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   54.64 ] round:  5 hashes:      2
c [appmc] [   54.64 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   60.42 ] round:  6 hashes:      3
c [appmc] [   60.42 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   60.60 ] round:  6 hashes:      2
c [appmc] [   60.60 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   62.19 ] round:  7 hashes:      3
c [appmc] [   62.19 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   62.36 ] round:  7 hashes:      2
c [appmc] [   62.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   63.66 ] round:  8 hashes:      3
c [appmc] [   63.66 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   63.82 ] round:  8 hashes:      2
c [appmc] [   63.82 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] FINISHED ApproxMC T: 63.88 s
c [appmc] Number of solutions is: 62*2**3
s mc 496
** ASM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Apr  5 2021 16:42:43
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Apr  5 2021 16:41:55
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/gsv2008-2.c/01/counterSharp/asm.dimacs
c -- header says num vars:          18742
c -- header says num clauses:       93932
c WARNING: Empty line at line number 94348 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 93932
c -- xor clauses added: 0
c -- vars added 18742
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    7.52 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Did not find at least threshold+1 (80) we found only 0, i.e. we got exact count
c [appmc] Formula was UNSAT 
c [appmc] FINISHED ApproxMC T: 7.54 s
c [appmc] Formula was UNSAT 
c [appmc] Number of solutions is: 0*2**0
s mc 0
** ASH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Apr  5 2021 16:42:43
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Apr  5 2021 16:41:55
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/gsv2008-2.c/01/counterSharp/ash.dimacs
c -- header says num vars:          18742
c -- header says num clauses:       93932
c WARNING: Empty line at line number 94348 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 93932
c -- xor clauses added: 0
c -- vars added 18742
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    8.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    8.36 ] round:  0 hashes:      1
c [appmc] [    8.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    8.70 ] round:  0 hashes:      2
c [appmc] [    8.70 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    8.91 ] round:  0 hashes:      4
c [appmc] [    8.91 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    8.99 ] round:  0 hashes:      3
c [appmc] [    8.99 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [   18.71 ] round:  1 hashes:      3
c [appmc] [   18.71 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   18.95 ] round:  1 hashes:      2
c [appmc] [   18.95 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   27.75 ] round:  2 hashes:      3
c [appmc] [   27.75 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   28.00 ] round:  2 hashes:      2
c [appmc] [   28.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   37.03 ] round:  3 hashes:      3
c [appmc] [   37.03 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   37.28 ] round:  3 hashes:      2
c [appmc] [   37.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   46.42 ] round:  4 hashes:      3
c [appmc] [   46.42 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   46.65 ] round:  4 hashes:      2
c [appmc] [   46.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   54.35 ] round:  5 hashes:      3
c [appmc] [   54.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   54.54 ] round:  5 hashes:      2
c [appmc] [   54.54 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   63.02 ] round:  6 hashes:      3
c [appmc] [   63.02 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   63.23 ] round:  6 hashes:      2
c [appmc] [   63.23 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   70.22 ] round:  7 hashes:      3
c [appmc] [   70.22 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   70.41 ] round:  7 hashes:      2
c [appmc] [   70.41 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   77.63 ] round:  8 hashes:      3
c [appmc] [   77.63 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   77.82 ] round:  8 hashes:      2
c [appmc] [   77.82 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] FINISHED ApproxMC T: 77.88 s
c [appmc] Number of solutions is: 62*2**3
s mc 496
