** CON **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/gsv2008-2.c/03/counterSharp/con.dimacs
c -- header says num vars:           9504
c -- header says num clauses:       45912
c WARNING: Empty line at line number 46124 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 45912
c -- xor clauses added: 0
c -- vars added 9504
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    5.88 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Did not find at least threshold+1 (80) we found only 26, i.e. we got exact count
c [appmc] FINISHED ApproxMC T: 5.91 s
c [appmc] Number of solutions is: 26*2**0
s mc 26
** AMM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/gsv2008-2.c/03/counterSharp/amm.dimacs
c -- header says num vars:           9499
c -- header says num clauses:       45909
c WARNING: Empty line at line number 46123 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 45909
c -- xor clauses added: 0
c -- vars added 9499
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    4.64 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    4.74 ] round:  0 hashes:      1
c [appmc] [    4.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    4.89 ] round:  0 hashes:      2
c [appmc] [    4.89 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    4.98 ] round:  0 hashes:      4
c [appmc] [    4.98 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    5.12 ] round:  0 hashes:      8
c [appmc] [    5.12 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    5.30 ] round:  0 hashes:     16
c [appmc] [    5.30 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    5.52 ] round:  0 hashes:     24
c [appmc] [    5.52 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    5.74 ] round:  0 hashes:     28
c [appmc] [    5.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [    5.78 ] round:  0 hashes:     26
c [appmc] [    5.78 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    5.88 ] round:  0 hashes:     25
c [appmc] [    5.88 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   11.27 ] round:  1 hashes:     26
c [appmc] [   11.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   11.44 ] round:  1 hashes:     25
c [appmc] [   11.44 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   15.06 ] round:  2 hashes:     26
c [appmc] [   15.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   15.23 ] round:  2 hashes:     25
c [appmc] [   15.23 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   19.35 ] round:  3 hashes:     26
c [appmc] [   19.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   19.52 ] round:  3 hashes:     25
c [appmc] [   19.52 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   20.92 ] round:  4 hashes:     26
c [appmc] [   20.92 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   21.11 ] round:  4 hashes:     25
c [appmc] [   21.11 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   22.87 ] round:  5 hashes:     26
c [appmc] [   22.87 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   23.06 ] round:  5 hashes:     25
c [appmc] [   23.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   24.48 ] round:  6 hashes:     26
c [appmc] [   24.48 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   24.66 ] round:  6 hashes:     25
c [appmc] [   24.66 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   26.22 ] round:  7 hashes:     26
c [appmc] [   26.22 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   26.40 ] round:  7 hashes:     25
c [appmc] [   26.40 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [   28.77 ] round:  8 hashes:     26
c [appmc] [   28.77 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   28.96 ] round:  8 hashes:     25
c [appmc] [   28.96 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] FINISHED ApproxMC T: 29.01 s
c [appmc] Number of solutions is: 64*2**26
s mc 4294967296
** AMH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/gsv2008-2.c/03/counterSharp/amh.dimacs
c -- header says num vars:           9499
c -- header says num clauses:       45909
c WARNING: Empty line at line number 46123 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 45909
c -- xor clauses added: 0
c -- vars added 9499
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    6.05 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    6.12 ] round:  0 hashes:      1
c [appmc] [    6.12 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    6.20 ] round:  0 hashes:      2
c [appmc] [    6.20 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    6.24 ] round:  0 hashes:      4
c [appmc] [    6.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    6.26 ] round:  0 hashes:      3
c [appmc] [    6.26 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    9.95 ] round:  1 hashes:      3
c [appmc] [    9.95 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   10.00 ] round:  1 hashes:      2
c [appmc] [   10.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   10.33 ] round:  2 hashes:      3
c [appmc] [   10.33 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   10.39 ] round:  2 hashes:      2
c [appmc] [   10.39 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   10.69 ] round:  3 hashes:      3
c [appmc] [   10.69 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   10.74 ] round:  3 hashes:      2
c [appmc] [   10.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   10.98 ] round:  4 hashes:      3
c [appmc] [   10.98 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   11.04 ] round:  4 hashes:      2
c [appmc] [   11.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   11.32 ] round:  5 hashes:      3
c [appmc] [   11.32 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   11.36 ] round:  5 hashes:      2
c [appmc] [   11.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   11.64 ] round:  6 hashes:      3
c [appmc] [   11.64 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   11.68 ] round:  6 hashes:      2
c [appmc] [   11.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   11.97 ] round:  7 hashes:      3
c [appmc] [   11.97 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   12.02 ] round:  7 hashes:      2
c [appmc] [   12.02 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   12.27 ] round:  8 hashes:      3
c [appmc] [   12.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   12.32 ] round:  8 hashes:      2
c [appmc] [   12.32 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] FINISHED ApproxMC T: 12.34 s
c [appmc] Number of solutions is: 59*2**3
s mc 472
** ASM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/gsv2008-2.c/03/counterSharp/asm.dimacs
c -- header says num vars:           9501
c -- header says num clauses:       45915
c WARNING: Empty line at line number 46131 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 45915
c -- xor clauses added: 0
c -- vars added 9501
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    5.20 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Did not find at least threshold+1 (80) we found only 0, i.e. we got exact count
c [appmc] Formula was UNSAT 
c [appmc] FINISHED ApproxMC T: 5.20 s
c [appmc] Formula was UNSAT 
c [appmc] Number of solutions is: 0*2**0
s mc 0
** ASH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/gsv2008-2.c/03/counterSharp/ash.dimacs
c -- header says num vars:           9501
c -- header says num clauses:       45915
c WARNING: Empty line at line number 46131 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 45915
c -- xor clauses added: 0
c -- vars added 9501
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    5.90 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    5.97 ] round:  0 hashes:      1
c [appmc] [    5.97 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    6.05 ] round:  0 hashes:      2
c [appmc] [    6.05 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    6.09 ] round:  0 hashes:      4
c [appmc] [    6.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    6.11 ] round:  0 hashes:      3
c [appmc] [    6.11 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    9.58 ] round:  1 hashes:      3
c [appmc] [    9.58 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [    9.63 ] round:  1 hashes:      2
c [appmc] [    9.63 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   10.06 ] round:  2 hashes:      3
c [appmc] [   10.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   10.12 ] round:  2 hashes:      2
c [appmc] [   10.12 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   10.40 ] round:  3 hashes:      3
c [appmc] [   10.40 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   10.45 ] round:  3 hashes:      2
c [appmc] [   10.45 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   10.72 ] round:  4 hashes:      3
c [appmc] [   10.72 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   10.78 ] round:  4 hashes:      2
c [appmc] [   10.78 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   11.05 ] round:  5 hashes:      3
c [appmc] [   11.05 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   11.10 ] round:  5 hashes:      2
c [appmc] [   11.10 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   11.36 ] round:  6 hashes:      3
c [appmc] [   11.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   11.40 ] round:  6 hashes:      2
c [appmc] [   11.40 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   11.68 ] round:  7 hashes:      3
c [appmc] [   11.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   11.72 ] round:  7 hashes:      2
c [appmc] [   11.72 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] simplifying
c [appmc] [   11.98 ] round:  8 hashes:      3
c [appmc] [   11.98 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] [   12.03 ] round:  8 hashes:      2
c [appmc] [   12.03 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] FINISHED ApproxMC T: 12.05 s
c [appmc] Number of solutions is: 59*2**3
s mc 472
