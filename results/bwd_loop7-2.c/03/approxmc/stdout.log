** CON **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/bwd_loop7-2.c/03/counterSharp/con.dimacs
** AMM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/bwd_loop7-2.c/03/counterSharp/amm.dimacs
c -- header says num vars:          41937
c -- header says num clauses:      170246
c WARNING: Empty line at line number 170659 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 170246
c -- xor clauses added: 0
c -- vars added 41937
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    1.70 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    1.84 ] round:  0 hashes:      1
c [appmc] [    1.84 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    1.98 ] round:  0 hashes:      2
c [appmc] [    1.98 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    2.04 ] round:  0 hashes:      4
c [appmc] [    2.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.16 ] round:  0 hashes:      8
c [appmc] [    2.16 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    2.29 ] round:  0 hashes:     16
c [appmc] [    2.29 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    2.44 ] round:  0 hashes:     24
c [appmc] [    2.44 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    2.60 ] round:  0 hashes:     28
c [appmc] [    2.60 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [    2.62 ] round:  0 hashes:     26
c [appmc] [    2.62 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    2.67 ] round:  0 hashes:     25
c [appmc] [    2.67 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    2.68 ] round:  1 hashes:     26
c [appmc] [    2.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    2.80 ] round:  1 hashes:     25
c [appmc] [    2.80 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    2.84 ] round:  2 hashes:     26
c [appmc] [    2.84 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    2.96 ] round:  2 hashes:     25
c [appmc] [    2.96 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    3.00 ] round:  3 hashes:     26
c [appmc] [    3.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    3.12 ] round:  3 hashes:     25
c [appmc] [    3.12 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    3.16 ] round:  4 hashes:     26
c [appmc] [    3.16 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    3.28 ] round:  4 hashes:     25
c [appmc] [    3.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    3.32 ] round:  5 hashes:     26
c [appmc] [    3.32 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    3.44 ] round:  5 hashes:     25
c [appmc] [    3.44 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    3.48 ] round:  6 hashes:     26
c [appmc] [    3.48 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    3.61 ] round:  6 hashes:     25
c [appmc] [    3.61 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    3.65 ] round:  7 hashes:     26
c [appmc] [    3.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    3.78 ] round:  7 hashes:     25
c [appmc] [    3.78 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    3.81 ] round:  8 hashes:     26
c [appmc] [    3.81 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    3.94 ] round:  8 hashes:     25
c [appmc] [    3.94 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] FINISHED ApproxMC T: 3.98 s
c [appmc] Number of solutions is: 64*2**26
s mc 4294967296
** AMH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/bwd_loop7-2.c/03/counterSharp/amh.dimacs
c -- header says num vars:          41937
c -- header says num clauses:      170246
c WARNING: Empty line at line number 170659 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 170246
c -- xor clauses added: 0
c -- vars added 41937
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    0.61 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    0.72 ] round:  0 hashes:      1
c [appmc] [    0.72 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.82 ] round:  0 hashes:      2
c [appmc] [    0.82 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.87 ] round:  0 hashes:      4
c [appmc] [    0.87 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    0.92 ] round:  0 hashes:      3
c [appmc] [    0.92 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    0.94 ] round:  1 hashes:      4
c [appmc] [    0.94 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.02 ] round:  1 hashes:      3
c [appmc] [    1.02 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.05 ] round:  2 hashes:      4
c [appmc] [    1.05 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.13 ] round:  2 hashes:      3
c [appmc] [    1.13 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.16 ] round:  3 hashes:      4
c [appmc] [    1.16 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.24 ] round:  3 hashes:      3
c [appmc] [    1.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.27 ] round:  4 hashes:      4
c [appmc] [    1.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.35 ] round:  4 hashes:      3
c [appmc] [    1.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.37 ] round:  5 hashes:      4
c [appmc] [    1.37 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.46 ] round:  5 hashes:      3
c [appmc] [    1.46 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.48 ] round:  6 hashes:      4
c [appmc] [    1.48 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.56 ] round:  6 hashes:      3
c [appmc] [    1.56 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.59 ] round:  7 hashes:      4
c [appmc] [    1.59 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.68 ] round:  7 hashes:      3
c [appmc] [    1.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.70 ] round:  8 hashes:      4
c [appmc] [    1.70 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.78 ] round:  8 hashes:      3
c [appmc] [    1.78 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] FINISHED ApproxMC T: 1.81 s
c [appmc] Number of solutions is: 64*2**4
s mc 1024
** ASM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/bwd_loop7-2.c/03/counterSharp/asm.dimacs
c -- header says num vars:          41939
c -- header says num clauses:      170252
c WARNING: Empty line at line number 170667 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 170252
c -- xor clauses added: 0
c -- vars added 41939
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    0.62 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    0.76 ] round:  0 hashes:      1
c [appmc] [    0.76 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.89 ] round:  0 hashes:      2
c [appmc] [    0.89 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.94 ] round:  0 hashes:      4
c [appmc] [    0.94 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.01 ] round:  0 hashes:      3
c [appmc] [    1.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.15 ] round:  1 hashes:      4
c [appmc] [    1.15 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.25 ] round:  1 hashes:      3
c [appmc] [    1.25 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.40 ] round:  2 hashes:      4
c [appmc] [    1.40 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.49 ] round:  2 hashes:      3
c [appmc] [    1.49 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.64 ] round:  3 hashes:      4
c [appmc] [    1.64 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.73 ] round:  3 hashes:      3
c [appmc] [    1.73 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    1.87 ] round:  4 hashes:      4
c [appmc] [    1.87 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.97 ] round:  4 hashes:      3
c [appmc] [    1.97 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.12 ] round:  5 hashes:      4
c [appmc] [    2.12 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.21 ] round:  5 hashes:      3
c [appmc] [    2.21 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.35 ] round:  6 hashes:      4
c [appmc] [    2.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.44 ] round:  6 hashes:      3
c [appmc] [    2.44 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.57 ] round:  7 hashes:      4
c [appmc] [    2.57 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.67 ] round:  7 hashes:      3
c [appmc] [    2.67 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] simplifying
c [appmc] [    2.83 ] round:  8 hashes:      4
c [appmc] [    2.83 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    2.92 ] round:  8 hashes:      3
c [appmc] [    2.92 ] bounded_sol_count looking for   81 solutions -- hashes active: 3
c [appmc] FINISHED ApproxMC T: 2.95 s
c [appmc] Number of solutions is: 63*2**4
s mc 1008
** ASH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/bwd_loop7-2.c/03/counterSharp/ash.dimacs
c -- header says num vars:          41939
c -- header says num clauses:      170252
c WARNING: Empty line at line number 170667 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 170252
c -- xor clauses added: 0
c -- vars added 41939
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    0.45 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    0.55 ] round:  0 hashes:      1
c [appmc] [    0.55 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.62 ] round:  0 hashes:      1
c [appmc] [    0.62 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] simplifying
c [appmc] [    0.65 ] round:  1 hashes:      1
c [appmc] [    0.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.73 ] round:  1 hashes:      0
c [appmc] [    0.73 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [    0.79 ] round:  2 hashes:      1
c [appmc] [    0.79 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.86 ] round:  2 hashes:      0
c [appmc] [    0.86 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [    0.92 ] round:  3 hashes:      1
c [appmc] [    0.92 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.99 ] round:  3 hashes:      0
c [appmc] [    0.99 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [    1.06 ] round:  4 hashes:      1
c [appmc] [    1.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    1.12 ] round:  4 hashes:      0
c [appmc] [    1.12 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [    1.19 ] round:  5 hashes:      1
c [appmc] [    1.19 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    1.26 ] round:  5 hashes:      0
c [appmc] [    1.26 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [    1.32 ] round:  6 hashes:      1
c [appmc] [    1.32 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    1.39 ] round:  6 hashes:      0
c [appmc] [    1.39 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [    1.46 ] round:  7 hashes:      1
c [appmc] [    1.46 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    1.53 ] round:  7 hashes:      0
c [appmc] [    1.53 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [    1.59 ] round:  8 hashes:      1
c [appmc] [    1.59 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    1.67 ] round:  8 hashes:      0
c [appmc] [    1.67 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] FINISHED ApproxMC T: 1.70 s
c [appmc] Number of solutions is: 53*2**1
s mc 106
