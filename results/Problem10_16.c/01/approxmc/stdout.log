** CON **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/Problem10_16.c/01/counterSharp/con.dimacs
** AMM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/Problem10_16.c/01/counterSharp/amm.dimacs
c -- header says num vars:          78641
c -- header says num clauses:      549297
c WARNING: Empty line at line number 570600 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 549297
c -- xor clauses added: 0
c -- vars added 78641
c [appmc] Sampling set size: 128
c [appmc] Sampling var set contains over 100 variables, not displaying
c [sparse] Using match: 2 sampling set size: 128 prev end inclusive is: 100 this end inclusive is: 150 next end inclusive is: 200 sampl size: 128
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    6.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    6.95 ] round:  0 hashes:      1
c [appmc] [    6.95 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    7.63 ] round:  0 hashes:      2
c [appmc] [    7.63 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    8.01 ] round:  0 hashes:      4
c [appmc] [    8.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    8.49 ] round:  0 hashes:      8
c [appmc] [    8.49 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    9.15 ] round:  0 hashes:     16
c [appmc] [    9.15 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    9.84 ] round:  0 hashes:     32
c [appmc] [    9.84 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [   10.54 ] round:  0 hashes:     64
c [appmc] [   10.54 ] bounded_sol_count looking for   81 solutions -- hashes active: 64
c [appmc] [   11.27 ] round:  0 hashes:     96
c [appmc] [   11.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 96
c [appmc] [   12.05 ] round:  0 hashes:    112
c [appmc] [   12.05 ] bounded_sol_count looking for   81 solutions -- hashes active: 112
c [appmc] [   12.81 ] round:  0 hashes:    120
c [appmc] [   12.81 ] bounded_sol_count looking for   81 solutions -- hashes active: 120
c [appmc] [   13.58 ] round:  0 hashes:    124
c [appmc] [   13.58 ] bounded_sol_count looking for   81 solutions -- hashes active: 124
c [appmc] [   13.70 ] round:  0 hashes:    122
c [appmc] [   13.70 ] bounded_sol_count looking for   81 solutions -- hashes active: 122
c [appmc] [   14.04 ] round:  0 hashes:    121
c [appmc] [   14.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 121
c [appmc] simplifying
c [appmc] [   19.74 ] round:  1 hashes:    122
c [appmc] [   19.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 122
c [appmc] [   20.32 ] round:  1 hashes:    121
c [appmc] [   20.32 ] bounded_sol_count looking for   81 solutions -- hashes active: 121
c [appmc] simplifying
c [appmc] [   22.70 ] round:  2 hashes:    122
c [appmc] [   22.70 ] bounded_sol_count looking for   81 solutions -- hashes active: 122
c [appmc] [   23.29 ] round:  2 hashes:    121
c [appmc] [   23.29 ] bounded_sol_count looking for   81 solutions -- hashes active: 121
c [appmc] simplifying
c [appmc] [   24.74 ] round:  3 hashes:    122
c [appmc] [   24.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 122
c [appmc] [   25.35 ] round:  3 hashes:    121
c [appmc] [   25.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 121
c [appmc] simplifying
c [appmc] [   26.51 ] round:  4 hashes:    122
c [appmc] [   26.51 ] bounded_sol_count looking for   81 solutions -- hashes active: 122
c [appmc] [   27.13 ] round:  4 hashes:    121
c [appmc] [   27.13 ] bounded_sol_count looking for   81 solutions -- hashes active: 121
c [appmc] simplifying
c [appmc] [   28.35 ] round:  5 hashes:    122
c [appmc] [   28.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 122
c [appmc] [   29.00 ] round:  5 hashes:    121
c [appmc] [   29.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 121
c [appmc] simplifying
c [appmc] [   30.04 ] round:  6 hashes:    122
c [appmc] [   30.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 122
c [appmc] [   30.71 ] round:  6 hashes:    121
c [appmc] [   30.71 ] bounded_sol_count looking for   81 solutions -- hashes active: 121
c [appmc] simplifying
c [appmc] [   31.72 ] round:  7 hashes:    122
c [appmc] [   31.72 ] bounded_sol_count looking for   81 solutions -- hashes active: 122
c [appmc] [   32.41 ] round:  7 hashes:    121
c [appmc] [   32.41 ] bounded_sol_count looking for   81 solutions -- hashes active: 121
c [appmc] simplifying
c [appmc] [   33.46 ] round:  8 hashes:    122
c [appmc] [   33.46 ] bounded_sol_count looking for   81 solutions -- hashes active: 122
c [appmc] [   34.17 ] round:  8 hashes:    121
c [appmc] [   34.17 ] bounded_sol_count looking for   81 solutions -- hashes active: 121
c [appmc] FINISHED ApproxMC T: 34.36 s
c [appmc] Number of solutions is: 64*2**122
s mc 340282366920938463463374607431768211456
** AMH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/Problem10_16.c/01/counterSharp/amh.dimacs
c -- header says num vars:          78641
c -- header says num clauses:      549297
c WARNING: Empty line at line number 570600 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 549297
c -- xor clauses added: 0
c -- vars added 78641
c [appmc] Sampling set size: 128
c [appmc] Sampling var set contains over 100 variables, not displaying
c [sparse] Using match: 2 sampling set size: 128 prev end inclusive is: 100 this end inclusive is: 150 next end inclusive is: 200 sampl size: 128
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    5.58 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    6.28 ] round:  0 hashes:      1
c [appmc] [    6.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    6.95 ] round:  0 hashes:      2
c [appmc] [    6.95 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    7.27 ] round:  0 hashes:      4
c [appmc] [    7.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    7.93 ] round:  0 hashes:      8
c [appmc] [    7.93 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    8.62 ] round:  0 hashes:     16
c [appmc] [    8.62 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    9.41 ] round:  0 hashes:     32
c [appmc] [    9.41 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [   10.07 ] round:  0 hashes:     24
c [appmc] [   10.07 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   10.65 ] round:  0 hashes:     28
c [appmc] [   10.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [   11.31 ] round:  0 hashes:     30
c [appmc] [   11.31 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] [   11.86 ] round:  0 hashes:     31
c [appmc] [   11.86 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] simplifying
c [appmc] [   18.69 ] round:  1 hashes:     31
c [appmc] [   18.69 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   20.96 ] round:  1 hashes:     30
c [appmc] [   20.96 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] simplifying
c [appmc] [   28.69 ] round:  2 hashes:     31
c [appmc] [   28.69 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   30.78 ] round:  2 hashes:     32
c [appmc] [   30.78 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] simplifying
c [appmc] [   36.43 ] round:  3 hashes:     32
c [appmc] [   36.43 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [   37.35 ] round:  3 hashes:     31
c [appmc] [   37.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   38.58 ] round:  3 hashes:     30
c [appmc] [   38.58 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] simplifying
c [appmc] [   41.48 ] round:  4 hashes:     31
c [appmc] [   41.48 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   43.06 ] round:  4 hashes:     30
c [appmc] [   43.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] simplifying
c [appmc] [   44.89 ] round:  5 hashes:     31
c [appmc] [   44.89 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   46.75 ] round:  5 hashes:     32
c [appmc] [   46.75 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] simplifying
c [appmc] [   47.91 ] round:  6 hashes:     32
c [appmc] [   47.91 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [   48.70 ] round:  6 hashes:     31
c [appmc] [   48.70 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   49.95 ] round:  6 hashes:     30
c [appmc] [   49.95 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] simplifying
c [appmc] [   51.44 ] round:  7 hashes:     31
c [appmc] [   51.44 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   53.36 ] round:  7 hashes:     30
c [appmc] [   53.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] simplifying
c [appmc] [   54.85 ] round:  8 hashes:     31
c [appmc] [   54.85 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   56.50 ] round:  8 hashes:     30
c [appmc] [   56.50 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] FINISHED ApproxMC T: 56.73 s
c [appmc] Number of solutions is: 72*2**31
s mc 154618822656
** ASM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/Problem10_16.c/01/counterSharp/asm.dimacs
c -- header says num vars:          78673
c -- header says num clauses:      549408
c WARNING: Empty line at line number 570742 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 549408
c -- xor clauses added: 0
c -- vars added 78673
c [appmc] Sampling set size: 128
c [appmc] Sampling var set contains over 100 variables, not displaying
c [sparse] Using match: 2 sampling set size: 128 prev end inclusive is: 100 this end inclusive is: 150 next end inclusive is: 200 sampl size: 128
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    5.63 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    6.49 ] round:  0 hashes:      1
c [appmc] [    6.49 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    7.28 ] round:  0 hashes:      2
c [appmc] [    7.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    7.77 ] round:  0 hashes:      4
c [appmc] [    7.77 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    8.58 ] round:  0 hashes:      8
c [appmc] [    8.58 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    9.71 ] round:  0 hashes:     16
c [appmc] [    9.71 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [   10.66 ] round:  0 hashes:     32
c [appmc] [   10.66 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [   11.27 ] round:  0 hashes:     24
c [appmc] [   11.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   11.96 ] round:  0 hashes:     28
c [appmc] [   11.96 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [   12.64 ] round:  0 hashes:     30
c [appmc] [   12.64 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] [   13.72 ] round:  0 hashes:     31
c [appmc] [   13.72 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] simplifying
c [appmc] [   21.14 ] round:  1 hashes:     31
c [appmc] [   21.14 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   22.95 ] round:  1 hashes:     30
c [appmc] [   22.95 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] simplifying
c [appmc] [   31.94 ] round:  2 hashes:     31
c [appmc] [   31.94 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   34.79 ] round:  2 hashes:     30
c [appmc] [   34.79 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] simplifying
c [appmc] [   40.52 ] round:  3 hashes:     31
c [appmc] [   40.52 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   42.60 ] round:  3 hashes:     30
c [appmc] [   42.60 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] simplifying
c [appmc] [   46.13 ] round:  4 hashes:     31
c [appmc] [   46.13 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   47.86 ] round:  4 hashes:     30
c [appmc] [   47.86 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] simplifying
c [appmc] [   49.92 ] round:  5 hashes:     31
c [appmc] [   49.92 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   51.99 ] round:  5 hashes:     30
c [appmc] [   51.99 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] simplifying
c [appmc] [   53.32 ] round:  6 hashes:     31
c [appmc] [   53.32 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   55.34 ] round:  6 hashes:     30
c [appmc] [   55.34 ] bounded_sol_count looking for   81 solutions -- hashes active: 30
c [appmc] simplifying
c [appmc] [   56.58 ] round:  7 hashes:     31
c [appmc] [   56.58 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] [   58.68 ] round:  7 hashes:     32
c [appmc] [   58.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] simplifying
c [appmc] [   59.83 ] round:  8 hashes:     32
c [appmc] [   59.83 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [   61.16 ] round:  8 hashes:     31
c [appmc] [   61.16 ] bounded_sol_count looking for   81 solutions -- hashes active: 31
c [appmc] FINISHED ApproxMC T: 62.08 s
c [appmc] Number of solutions is: 73*2**31
s mc 156766306304
** ASH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 01 /experiments/results/Problem10_16.c/01/counterSharp/ash.dimacs
c -- header says num vars:          78673
c -- header says num clauses:      549408
c WARNING: Empty line at line number 570742 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 549408
c -- xor clauses added: 0
c -- vars added 78673
c [appmc] Sampling set size: 128
c [appmc] Sampling var set contains over 100 variables, not displaying
c [sparse] Using match: 2 sampling set size: 128 prev end inclusive is: 100 this end inclusive is: 150 next end inclusive is: 200 sampl size: 128
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    5.49 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    6.36 ] round:  0 hashes:      1
c [appmc] [    6.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    7.23 ] round:  0 hashes:      2
c [appmc] [    7.23 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    7.67 ] round:  0 hashes:      4
c [appmc] [    7.67 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    8.37 ] round:  0 hashes:      8
c [appmc] [    8.37 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    9.51 ] round:  0 hashes:     16
c [appmc] [    9.51 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [   11.65 ] round:  0 hashes:     32
c [appmc] [   11.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [   12.09 ] round:  0 hashes:     24
c [appmc] [   12.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [   17.53 ] round:  0 hashes:     28
c [appmc] [   17.53 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [   22.37 ] round:  0 hashes:     26
c [appmc] [   22.37 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [   29.56 ] round:  0 hashes:     27
c [appmc] [   29.56 ] bounded_sol_count looking for   81 solutions -- hashes active: 27
c [appmc] simplifying
c [appmc] [   35.91 ] round:  1 hashes:     27
c [appmc] [   35.91 ] bounded_sol_count looking for   81 solutions -- hashes active: 27
c [appmc] [   39.74 ] round:  1 hashes:     28
c [appmc] [   39.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] simplifying
c [appmc] [   41.48 ] round:  2 hashes:     28
c [appmc] [   41.48 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [   43.19 ] round:  2 hashes:     27
c [appmc] [   43.19 ] bounded_sol_count looking for   81 solutions -- hashes active: 27
c [appmc] simplifying
c [appmc] [   46.94 ] round:  3 hashes:     28
c [appmc] [   46.94 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [   49.10 ] round:  3 hashes:     27
c [appmc] [   49.10 ] bounded_sol_count looking for   81 solutions -- hashes active: 27
c [appmc] [   52.53 ] round:  3 hashes:     26
c [appmc] [   52.53 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] simplifying
c [appmc] [   53.19 ] round:  4 hashes:     27
c [appmc] [   53.19 ] bounded_sol_count looking for   81 solutions -- hashes active: 27
c [appmc] [   56.62 ] round:  4 hashes:     28
c [appmc] [   56.62 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] simplifying
c [appmc] [   58.04 ] round:  5 hashes:     28
c [appmc] [   58.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [   60.37 ] round:  5 hashes:     27
c [appmc] [   60.37 ] bounded_sol_count looking for   81 solutions -- hashes active: 27
c [appmc] [   63.27 ] round:  5 hashes:     26
c [appmc] [   63.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] simplifying
c [appmc] [   64.11 ] round:  6 hashes:     27
c [appmc] [   64.11 ] bounded_sol_count looking for   81 solutions -- hashes active: 27
c [appmc] [   67.74 ] round:  6 hashes:     28
c [appmc] [   67.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] simplifying
c [appmc] [   69.35 ] round:  7 hashes:     28
c [appmc] [   69.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [   71.01 ] round:  7 hashes:     27
c [appmc] [   71.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 27
c [appmc] simplifying
c [appmc] [   74.77 ] round:  8 hashes:     28
c [appmc] [   74.77 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [   76.28 ] round:  8 hashes:     27
c [appmc] [   76.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 27
c [appmc] [   78.89 ] round:  8 hashes:     26
c [appmc] [   78.89 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] FINISHED ApproxMC T: 79.09 s
c [appmc] Number of solutions is: 77*2**27
s mc 10334765056
