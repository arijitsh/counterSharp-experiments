** counterSharp **
** AMM **
c ApproxMC SHA revision 4648f20bf454cfc55b606142dd974bed44750e1a
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Aug 17 2020 10:12:40
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright (C) 2009-2020 Authors of CryptoMiniSat, see AUTHORS file
c CMS SHA revision a11dd3a5ac4d2de6bcb9edcb853b8abb6ecdd61f
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Aug 17 2020 10:07:40
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 /home/steuber/Dokumente/Bench/FP/experiments/results/usqrt.c/02/amm.dimacs
c -- header says num vars:           6791
c -- header says num clauses:       31185
c WARNING: Empty line at line number 31561 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 31185
c -- xor clauses added: 0
c -- vars added 6791
c [appmc] Sampling set size: 88
c [appmc] Sampling set: 70, 71, 72, 73, 74, 75, 76, 77, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 70, 71, 72, 73, 74, 75, 70, 71, 72, 73, 70, 71, 
c [sparse] Using match: 1 sampling set size: 88 prev end inclusive is: 50 this end inclusive is: 100 next end inclusive is: 150 sampl size: 88
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Starting at hash count: 1
c [appmc] [    0.00 ] round:  0 hashes:      1
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    1.25 ] round:  0 hashes:      2
c [appmc] [    1.25 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    1.34 ] round:  0 hashes:      4
c [appmc] [    1.34 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.47 ] round:  0 hashes:      8
c [appmc] [    1.47 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    1.64 ] round:  0 hashes:     16
c [appmc] [    1.64 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    1.81 ] round:  0 hashes:     32
c [appmc] [    1.81 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [    1.81 ] round:  0 hashes:     24
c [appmc] [    1.81 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    1.98 ] round:  0 hashes:     28
c [appmc] [    1.98 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [    1.99 ] round:  0 hashes:     26
c [appmc] [    1.99 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    2.02 ] round:  0 hashes:     25
c [appmc] [    2.02 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    2.06 ] round:  1 hashes:     25
c [appmc] [    2.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.20 ] round:  1 hashes:     24
c [appmc] [    2.20 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.25 ] round:  2 hashes:     25
c [appmc] [    2.25 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.40 ] round:  2 hashes:     24
c [appmc] [    2.40 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.45 ] round:  3 hashes:     25
c [appmc] [    2.45 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.61 ] round:  3 hashes:     24
c [appmc] [    2.61 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.66 ] round:  4 hashes:     25
c [appmc] [    2.66 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.82 ] round:  4 hashes:     24
c [appmc] [    2.82 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.87 ] round:  5 hashes:     25
c [appmc] [    2.87 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    3.03 ] round:  5 hashes:     24
c [appmc] [    3.03 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    3.09 ] round:  6 hashes:     25
c [appmc] [    3.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    3.09 ] round:  6 hashes:     24
c [appmc] [    3.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    3.09 ] round:  6 hashes:     23
c [appmc] [    3.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 23
c [appmc] simplifying
c [appmc] [    3.31 ] round:  7 hashes:     24
c [appmc] [    3.31 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    3.52 ] round:  7 hashes:     25
c [appmc] [    3.52 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    3.60 ] round:  8 hashes:     25
c [appmc] [    3.60 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    3.77 ] round:  8 hashes:     24
c [appmc] [    3.77 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] FINISHED ApproxMC T: 3.82 s
c [appmc] Number of solutions is: 128*2**24
s mc 2147483648
** AMH **
c ApproxMC SHA revision 4648f20bf454cfc55b606142dd974bed44750e1a
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Aug 17 2020 10:12:40
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright (C) 2009-2020 Authors of CryptoMiniSat, see AUTHORS file
c CMS SHA revision a11dd3a5ac4d2de6bcb9edcb853b8abb6ecdd61f
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Aug 17 2020 10:07:40
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 /home/steuber/Dokumente/Bench/FP/experiments/results/usqrt.c/02/amh.dimacs
c -- header says num vars:           6791
c -- header says num clauses:       31185
c WARNING: Empty line at line number 31561 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 31185
c -- xor clauses added: 0
c -- vars added 6791
c [appmc] Sampling set size: 88
c [appmc] Sampling set: 70, 71, 72, 73, 74, 75, 76, 77, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 70, 71, 72, 73, 74, 75, 70, 71, 72, 73, 70, 71, 
c [sparse] Using match: 1 sampling set size: 88 prev end inclusive is: 50 this end inclusive is: 100 next end inclusive is: 150 sampl size: 88
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Starting at hash count: 1
c [appmc] [    0.00 ] round:  0 hashes:      1
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    1.14 ] round:  0 hashes:      2
c [appmc] [    1.14 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    1.22 ] round:  0 hashes:      4
c [appmc] [    1.22 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    1.35 ] round:  0 hashes:      8
c [appmc] [    1.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    1.51 ] round:  0 hashes:     16
c [appmc] [    1.51 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    1.68 ] round:  0 hashes:     32
c [appmc] [    1.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [    1.68 ] round:  0 hashes:     24
c [appmc] [    1.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    1.86 ] round:  0 hashes:     28
c [appmc] [    1.86 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [    1.87 ] round:  0 hashes:     26
c [appmc] [    1.87 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    1.89 ] round:  0 hashes:     25
c [appmc] [    1.89 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    1.95 ] round:  1 hashes:     25
c [appmc] [    1.95 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.09 ] round:  1 hashes:     24
c [appmc] [    2.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.14 ] round:  2 hashes:     25
c [appmc] [    2.14 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.29 ] round:  2 hashes:     24
c [appmc] [    2.29 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.35 ] round:  3 hashes:     25
c [appmc] [    2.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.50 ] round:  3 hashes:     24
c [appmc] [    2.50 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.55 ] round:  4 hashes:     25
c [appmc] [    2.55 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.71 ] round:  4 hashes:     24
c [appmc] [    2.71 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.76 ] round:  5 hashes:     25
c [appmc] [    2.76 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.93 ] round:  5 hashes:     24
c [appmc] [    2.93 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.98 ] round:  6 hashes:     25
c [appmc] [    2.98 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    3.19 ] round:  6 hashes:     26
c [appmc] [    3.19 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] simplifying
c [appmc] [    3.27 ] round:  7 hashes:     26
c [appmc] [    3.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    3.36 ] round:  7 hashes:     25
c [appmc] [    3.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    3.44 ] round:  7 hashes:     24
c [appmc] [    3.44 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    3.50 ] round:  8 hashes:     25
c [appmc] [    3.50 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    3.68 ] round:  8 hashes:     24
c [appmc] [    3.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] FINISHED ApproxMC T: 3.73 s
c [appmc] Number of solutions is: 64*2**25
s mc 2147483648
** ASM **
c ApproxMC SHA revision 4648f20bf454cfc55b606142dd974bed44750e1a
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Aug 17 2020 10:12:40
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright (C) 2009-2020 Authors of CryptoMiniSat, see AUTHORS file
c CMS SHA revision a11dd3a5ac4d2de6bcb9edcb853b8abb6ecdd61f
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Aug 17 2020 10:07:40
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 /home/steuber/Dokumente/Bench/FP/experiments/results/usqrt.c/02/asm.dimacs
c -- header says num vars:           6792
c -- header says num clauses:       31188
c WARNING: Empty line at line number 31564 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 31188
c -- xor clauses added: 0
c -- vars added 6792
c [appmc] Sampling set size: 88
c [appmc] Sampling set: 70, 71, 72, 73, 74, 75, 76, 77, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 70, 71, 72, 73, 74, 75, 70, 71, 72, 73, 70, 71, 
c [sparse] Using match: 1 sampling set size: 88 prev end inclusive is: 50 this end inclusive is: 100 next end inclusive is: 150 sampl size: 88
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Starting at hash count: 1
c [appmc] [    0.00 ] round:  0 hashes:      1
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [  274.93 ] round:  0 hashes:      1
c [appmc] [  274.93 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] simplifying
c [appmc] [  482.15 ] round:  1 hashes:      1
c [appmc] [  482.15 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [  821.91 ] round:  1 hashes:      0
c [appmc] [  821.91 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [ 1189.09 ] round:  2 hashes:      1
c [appmc] [ 1189.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [ 1385.40 ] round:  2 hashes:      0
c [appmc] [ 1385.40 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [ 1655.24 ] round:  3 hashes:      1
c [appmc] [ 1655.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [ 1795.21 ] round:  3 hashes:      0
c [appmc] [ 1795.21 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [ 1954.12 ] round:  4 hashes:      1
c [appmc] [ 1954.12 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [ 2040.98 ] round:  4 hashes:      0
c [appmc] [ 2040.98 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [ 2129.74 ] round:  5 hashes:      1
c [appmc] [ 2129.74 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [ 2175.02 ] round:  5 hashes:      0
c [appmc] [ 2175.02 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [ 2220.20 ] round:  6 hashes:      1
c [appmc] [ 2220.20 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [ 2220.44 ] round:  6 hashes:      0
c [appmc] [ 2220.44 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [ 2220.55 ] round:  7 hashes:      1
c [appmc] [ 2220.55 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [ 2220.55 ] round:  7 hashes:      0
c [appmc] [ 2220.55 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] simplifying
c [appmc] [ 2220.55 ] round:  8 hashes:      1
c [appmc] [ 2220.55 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [ 2220.55 ] round:  8 hashes:      0
c [appmc] [ 2220.55 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
** ASH **
c ApproxMC SHA revision 4648f20bf454cfc55b606142dd974bed44750e1a
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Aug 17 2020 10:12:40
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright (C) 2009-2020 Authors of CryptoMiniSat, see AUTHORS file
c CMS SHA revision a11dd3a5ac4d2de6bcb9edcb853b8abb6ecdd61f
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Aug 17 2020 10:07:40
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 /home/steuber/Dokumente/Bench/FP/experiments/results/usqrt.c/02/ash.dimacs
c -- header says num vars:           6792
c -- header says num clauses:       31188
c WARNING: Empty line at line number 31564 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 31188
c -- xor clauses added: 0
c -- vars added 6792
c [appmc] Sampling set size: 88
c [appmc] Sampling set: 70, 71, 72, 73, 74, 75, 76, 77, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 70, 71, 72, 73, 74, 75, 70, 71, 72, 73, 70, 71, 
c [sparse] Using match: 1 sampling set size: 88 prev end inclusive is: 50 this end inclusive is: 100 next end inclusive is: 150 sampl size: 88
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Starting at hash count: 1
c [appmc] [    0.00 ] round:  0 hashes:      1
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.77 ] round:  0 hashes:      2
c [appmc] [    0.77 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.84 ] round:  0 hashes:      4
c [appmc] [    0.84 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    0.94 ] round:  0 hashes:      8
c [appmc] [    0.94 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    1.07 ] round:  0 hashes:     16
c [appmc] [    1.07 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    1.21 ] round:  0 hashes:     32
c [appmc] [    1.21 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [    1.21 ] round:  0 hashes:     24
c [appmc] [    1.21 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    1.36 ] round:  0 hashes:     28
c [appmc] [    1.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [    1.36 ] round:  0 hashes:     26
c [appmc] [    1.36 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    1.38 ] round:  0 hashes:     25
c [appmc] [    1.38 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    1.70 ] round:  1 hashes:     25
c [appmc] [    1.70 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    1.81 ] round:  1 hashes:     24
c [appmc] [    1.81 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.01 ] round:  2 hashes:     25
c [appmc] [    2.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.12 ] round:  2 hashes:     24
c [appmc] [    2.12 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.27 ] round:  3 hashes:     25
c [appmc] [    2.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.39 ] round:  3 hashes:     24
c [appmc] [    2.39 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.55 ] round:  4 hashes:     25
c [appmc] [    2.55 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.66 ] round:  4 hashes:     24
c [appmc] [    2.66 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.81 ] round:  5 hashes:     25
c [appmc] [    2.81 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.93 ] round:  5 hashes:     24
c [appmc] [    2.93 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    3.09 ] round:  6 hashes:     25
c [appmc] [    3.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    3.23 ] round:  6 hashes:     26
c [appmc] [    3.23 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] simplifying
c [appmc] [    3.41 ] round:  7 hashes:     26
c [appmc] [    3.41 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    3.47 ] round:  7 hashes:     25
c [appmc] [    3.47 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    3.53 ] round:  7 hashes:     24
c [appmc] [    3.53 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    3.68 ] round:  8 hashes:     25
c [appmc] [    3.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    3.81 ] round:  8 hashes:     24
c [appmc] [    3.81 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] FINISHED ApproxMC T: 3.84 s
c [appmc] Number of solutions is: 64*2**25
s mc 2147483648
