** counterSharp **
** AMM **
c ApproxMC SHA revision 4648f20bf454cfc55b606142dd974bed44750e1a
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Aug 17 2020 10:12:40
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright (C) 2009-2020 Authors of CryptoMiniSat, see AUTHORS file
c CMS SHA revision a11dd3a5ac4d2de6bcb9edcb853b8abb6ecdd61f
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Aug 17 2020 10:07:40
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 /home/steuber/Dokumente/Bench/FP/experiments/results/nondet.c/03/amm.dimacs
** AMH **
c ApproxMC SHA revision 4648f20bf454cfc55b606142dd974bed44750e1a
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Aug 17 2020 10:12:40
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright (C) 2009-2020 Authors of CryptoMiniSat, see AUTHORS file
c CMS SHA revision a11dd3a5ac4d2de6bcb9edcb853b8abb6ecdd61f
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Aug 17 2020 10:07:40
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 /home/steuber/Dokumente/Bench/FP/experiments/results/nondet.c/03/amh.dimacs
c -- header says num vars:           4823
c -- header says num clauses:       21871
c WARNING: Empty line at line number 21924 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 21871
c -- xor clauses added: 0
c -- vars added 4823
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Starting at hash count: 1
c [appmc] [    0.00 ] round:  0 hashes:      1
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.13 ] round:  0 hashes:      2
c [appmc] [    0.13 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.16 ] round:  0 hashes:      4
c [appmc] [    0.16 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    0.20 ] round:  0 hashes:      8
c [appmc] [    0.20 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    0.25 ] round:  0 hashes:     16
c [appmc] [    0.25 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    0.32 ] round:  0 hashes:     24
c [appmc] [    0.32 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    0.38 ] round:  0 hashes:     28
c [appmc] [    0.38 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [    0.39 ] round:  0 hashes:     26
c [appmc] [    0.39 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.42 ] round:  0 hashes:     25
c [appmc] [    0.42 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.56 ] round:  1 hashes:     26
c [appmc] [    0.56 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.60 ] round:  1 hashes:     25
c [appmc] [    0.60 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.68 ] round:  2 hashes:     26
c [appmc] [    0.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.72 ] round:  2 hashes:     25
c [appmc] [    0.72 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.80 ] round:  3 hashes:     26
c [appmc] [    0.80 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.84 ] round:  3 hashes:     25
c [appmc] [    0.84 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.93 ] round:  4 hashes:     26
c [appmc] [    0.93 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.97 ] round:  4 hashes:     25
c [appmc] [    0.97 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    1.06 ] round:  5 hashes:     26
c [appmc] [    1.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    1.10 ] round:  5 hashes:     25
c [appmc] [    1.10 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    1.19 ] round:  6 hashes:     26
c [appmc] [    1.19 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    1.24 ] round:  6 hashes:     25
c [appmc] [    1.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    1.33 ] round:  7 hashes:     26
c [appmc] [    1.33 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    1.38 ] round:  7 hashes:     25
c [appmc] [    1.38 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    1.46 ] round:  8 hashes:     26
c [appmc] [    1.46 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    1.52 ] round:  8 hashes:     25
c [appmc] [    1.52 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] FINISHED ApproxMC T: 1.53 s
c [appmc] Number of solutions is: 64*2**26
s mc 4294967296
** ASM **
c ApproxMC SHA revision 4648f20bf454cfc55b606142dd974bed44750e1a
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Aug 17 2020 10:12:40
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright (C) 2009-2020 Authors of CryptoMiniSat, see AUTHORS file
c CMS SHA revision a11dd3a5ac4d2de6bcb9edcb853b8abb6ecdd61f
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Aug 17 2020 10:07:40
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 /home/steuber/Dokumente/Bench/FP/experiments/results/nondet.c/03/asm.dimacs
c -- header says num vars:           4824
c -- header says num clauses:       21874
c WARNING: Empty line at line number 21927 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 21874
c -- xor clauses added: 0
c -- vars added 4824
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Starting at hash count: 1
c [appmc] [    0.00 ] round:  0 hashes:      1
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.06 ] round:  0 hashes:      2
c [appmc] [    0.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.08 ] round:  0 hashes:      4
c [appmc] [    0.08 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    0.10 ] round:  0 hashes:      8
c [appmc] [    0.10 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    0.13 ] round:  0 hashes:     16
c [appmc] [    0.13 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    0.16 ] round:  0 hashes:     24
c [appmc] [    0.16 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    0.20 ] round:  0 hashes:     28
c [appmc] [    0.20 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [    0.20 ] round:  0 hashes:     26
c [appmc] [    0.20 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.22 ] round:  0 hashes:     25
c [appmc] [    0.22 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.41 ] round:  1 hashes:     26
c [appmc] [    0.41 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.42 ] round:  1 hashes:     25
c [appmc] [    0.42 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.44 ] round:  2 hashes:     26
c [appmc] [    0.44 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.45 ] round:  2 hashes:     25
c [appmc] [    0.45 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.47 ] round:  3 hashes:     26
c [appmc] [    0.47 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.49 ] round:  3 hashes:     25
c [appmc] [    0.49 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.50 ] round:  4 hashes:     26
c [appmc] [    0.50 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.52 ] round:  4 hashes:     25
c [appmc] [    0.52 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.53 ] round:  5 hashes:     26
c [appmc] [    0.53 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.55 ] round:  5 hashes:     25
c [appmc] [    0.55 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.57 ] round:  6 hashes:     26
c [appmc] [    0.57 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.59 ] round:  6 hashes:     25
c [appmc] [    0.59 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.60 ] round:  7 hashes:     26
c [appmc] [    0.60 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.63 ] round:  7 hashes:     25
c [appmc] [    0.63 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.65 ] round:  8 hashes:     26
c [appmc] [    0.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.68 ] round:  8 hashes:     25
c [appmc] [    0.68 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] FINISHED ApproxMC T: 0.68 s
c [appmc] Number of solutions is: 64*2**26
s mc 4294967296
** ASH **
c ApproxMC SHA revision 4648f20bf454cfc55b606142dd974bed44750e1a
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Aug 17 2020 10:12:40
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright (C) 2009-2020 Authors of CryptoMiniSat, see AUTHORS file
c CMS SHA revision a11dd3a5ac4d2de6bcb9edcb853b8abb6ecdd61f
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Aug 17 2020 10:07:40
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 /home/steuber/Dokumente/Bench/FP/experiments/results/nondet.c/03/ash.dimacs
c -- header says num vars:           4824
c -- header says num clauses:       21874
c WARNING: Empty line at line number 21927 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 21874
c -- xor clauses added: 0
c -- vars added 4824
c [appmc] Sampling set size: 32
c [appmc] Sampling set: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
c [sparse] Using match: 0 sampling set size: 32 prev end inclusive is: -1 this end inclusive is: 50 next end inclusive is: 100 sampl size: 32
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Starting at hash count: 1
c [appmc] [    0.00 ] round:  0 hashes:      1
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.15 ] round:  0 hashes:      2
c [appmc] [    0.15 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.18 ] round:  0 hashes:      4
c [appmc] [    0.18 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    0.22 ] round:  0 hashes:      8
c [appmc] [    0.22 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    0.29 ] round:  0 hashes:     16
c [appmc] [    0.29 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    0.40 ] round:  0 hashes:     24
c [appmc] [    0.40 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] [    0.49 ] round:  0 hashes:     28
c [appmc] [    0.49 ] bounded_sol_count looking for   81 solutions -- hashes active: 28
c [appmc] [    0.50 ] round:  0 hashes:     26
c [appmc] [    0.50 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    0.50 ] round:  0 hashes:     25
c [appmc] [    0.50 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] simplifying
c [appmc] [    0.65 ] round:  1 hashes:     25
c [appmc] [    0.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    0.70 ] round:  1 hashes:     24
c [appmc] [    0.70 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    0.79 ] round:  2 hashes:     25
c [appmc] [    0.79 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    0.83 ] round:  2 hashes:     24
c [appmc] [    0.83 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    0.92 ] round:  3 hashes:     25
c [appmc] [    0.92 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    1.05 ] round:  3 hashes:     26
c [appmc] [    1.05 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] simplifying
c [appmc] [    1.17 ] round:  4 hashes:     26
c [appmc] [    1.17 ] bounded_sol_count looking for   81 solutions -- hashes active: 26
c [appmc] [    1.23 ] round:  4 hashes:     25
c [appmc] [    1.23 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    1.28 ] round:  4 hashes:     24
c [appmc] [    1.28 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    1.42 ] round:  5 hashes:     25
c [appmc] [    1.42 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    1.50 ] round:  5 hashes:     24
c [appmc] [    1.50 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    1.63 ] round:  6 hashes:     25
c [appmc] [    1.63 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    1.71 ] round:  6 hashes:     24
c [appmc] [    1.71 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    1.84 ] round:  7 hashes:     25
c [appmc] [    1.84 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    1.92 ] round:  7 hashes:     24
c [appmc] [    1.92 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] simplifying
c [appmc] [    2.04 ] round:  8 hashes:     25
c [appmc] [    2.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 25
c [appmc] [    2.14 ] round:  8 hashes:     24
c [appmc] [    2.14 ] bounded_sol_count looking for   81 solutions -- hashes active: 24
c [appmc] FINISHED ApproxMC T: 2.16 s
c [appmc] Number of solutions is: 64*2**25
s mc 2147483648
