** CON **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/rangesum03.c/03/counterSharp/con.dimacs
** AMM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/rangesum03.c/03/counterSharp/amm.dimacs
** AMH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/rangesum03.c/03/counterSharp/amh.dimacs
c -- header says num vars:            646
c -- header says num clauses:         748
c WARNING: Empty line at line number 795 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 748
c -- xor clauses added: 0
c -- vars added 646
c [appmc] Sampling set size: 96
c [appmc] Sampling set: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
c [sparse] Using match: 1 sampling set size: 96 prev end inclusive is: 50 this end inclusive is: 100 next end inclusive is: 150 sampl size: 96
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    0.00 ] round:  0 hashes:      1
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.01 ] round:  0 hashes:      2
c [appmc] [    0.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.01 ] round:  0 hashes:      4
c [appmc] [    0.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    0.02 ] round:  0 hashes:      8
c [appmc] [    0.02 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    0.03 ] round:  0 hashes:     16
c [appmc] [    0.03 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    0.04 ] round:  0 hashes:     32
c [appmc] [    0.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [    0.06 ] round:  0 hashes:     64
c [appmc] [    0.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 64
c [appmc] [    0.09 ] round:  0 hashes:     80
c [appmc] [    0.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 80
c [appmc] [    0.13 ] round:  0 hashes:     88
c [appmc] [    0.13 ] bounded_sol_count looking for   81 solutions -- hashes active: 88
c [appmc] [    0.16 ] round:  0 hashes:     92
c [appmc] [    0.16 ] bounded_sol_count looking for   81 solutions -- hashes active: 92
c [appmc] [    0.17 ] round:  0 hashes:     90
c [appmc] [    0.17 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.18 ] round:  0 hashes:     89
c [appmc] [    0.18 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.21 ] round:  1 hashes:     90
c [appmc] [    0.21 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.23 ] round:  1 hashes:     89
c [appmc] [    0.23 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.26 ] round:  2 hashes:     90
c [appmc] [    0.26 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.30 ] round:  2 hashes:     89
c [appmc] [    0.30 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.33 ] round:  3 hashes:     90
c [appmc] [    0.33 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.37 ] round:  3 hashes:     89
c [appmc] [    0.37 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.41 ] round:  4 hashes:     90
c [appmc] [    0.41 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.46 ] round:  4 hashes:     89
c [appmc] [    0.46 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.49 ] round:  5 hashes:     90
c [appmc] [    0.49 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.56 ] round:  5 hashes:     89
c [appmc] [    0.56 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.59 ] round:  6 hashes:     90
c [appmc] [    0.59 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.66 ] round:  6 hashes:     89
c [appmc] [    0.66 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.70 ] round:  7 hashes:     90
c [appmc] [    0.70 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.78 ] round:  7 hashes:     89
c [appmc] [    0.78 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.83 ] round:  8 hashes:     90
c [appmc] [    0.83 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.91 ] round:  8 hashes:     89
c [appmc] [    0.91 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] FINISHED ApproxMC T: 0.93 s
c [appmc] Number of solutions is: 64*2**90
s mc 79228162514264337593543950336
** ASM **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/rangesum03.c/03/counterSharp/asm.dimacs
c -- header says num vars:            647
c -- header says num clauses:         751
c WARNING: Empty line at line number 799 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 751
c -- xor clauses added: 0
c -- vars added 647
c [appmc] Sampling set size: 96
c [appmc] Sampling set: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
c [sparse] Using match: 1 sampling set size: 96 prev end inclusive is: 50 this end inclusive is: 100 next end inclusive is: 150 sampl size: 96
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    0.00 ] round:  0 hashes:      1
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.01 ] round:  0 hashes:      2
c [appmc] [    0.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.01 ] round:  0 hashes:      4
c [appmc] [    0.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    0.02 ] round:  0 hashes:      8
c [appmc] [    0.02 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    0.02 ] round:  0 hashes:     16
c [appmc] [    0.02 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    0.03 ] round:  0 hashes:     32
c [appmc] [    0.03 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [    0.05 ] round:  0 hashes:     64
c [appmc] [    0.05 ] bounded_sol_count looking for   81 solutions -- hashes active: 64
c [appmc] [    0.07 ] round:  0 hashes:     80
c [appmc] [    0.07 ] bounded_sol_count looking for   81 solutions -- hashes active: 80
c [appmc] [    0.09 ] round:  0 hashes:     88
c [appmc] [    0.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 88
c [appmc] [    0.11 ] round:  0 hashes:     92
c [appmc] [    0.11 ] bounded_sol_count looking for   81 solutions -- hashes active: 92
c [appmc] [    0.11 ] round:  0 hashes:     90
c [appmc] [    0.11 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.13 ] round:  0 hashes:     89
c [appmc] [    0.13 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.15 ] round:  1 hashes:     90
c [appmc] [    0.15 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.18 ] round:  1 hashes:     89
c [appmc] [    0.18 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.21 ] round:  2 hashes:     90
c [appmc] [    0.21 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.24 ] round:  2 hashes:     89
c [appmc] [    0.24 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.27 ] round:  3 hashes:     90
c [appmc] [    0.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.31 ] round:  3 hashes:     89
c [appmc] [    0.31 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.35 ] round:  4 hashes:     90
c [appmc] [    0.35 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.39 ] round:  4 hashes:     89
c [appmc] [    0.39 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.43 ] round:  5 hashes:     90
c [appmc] [    0.43 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.50 ] round:  5 hashes:     89
c [appmc] [    0.50 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.54 ] round:  6 hashes:     90
c [appmc] [    0.54 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.61 ] round:  6 hashes:     89
c [appmc] [    0.61 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.65 ] round:  7 hashes:     90
c [appmc] [    0.65 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.73 ] round:  7 hashes:     89
c [appmc] [    0.73 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] simplifying
c [appmc] [    0.77 ] round:  8 hashes:     90
c [appmc] [    0.77 ] bounded_sol_count looking for   81 solutions -- hashes active: 90
c [appmc] [    0.86 ] round:  8 hashes:     89
c [appmc] [    0.86 ] bounded_sol_count looking for   81 solutions -- hashes active: 89
c [appmc] FINISHED ApproxMC T: 0.89 s
c [appmc] Number of solutions is: 64*2**90
s mc 79228162514264337593543950336
** ASH **
c ApproxMC SHA revision 618b35b37e4d6019e0a84e37cc482187f35ee334
c ApproxMC version 4.0.1
c ApproxMC compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -fvisibility=hidden -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -fvisibility=hidden -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DBOOST_TEST_DYN_LINK | STATICCOMPILE = OFF | Boost_FOUND = TRUE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | GMP_FOUND = TRUE | ENABLE_ASSERTIONS = ON | MY_TARGETS =  | compilation date time = Nov  9 2020 10:31:14
c ApproxMC compiled with gcc version 9.3.0
c CryptoMiniSat version 5.8.0
c CMS Copyright Mate Soos (soos.mate@gmail.com)
c CMS SHA revision 6477e8bc43b0fda7038965bb148b64b8637c804b
c CMS is GPL licensed due to M4RI being linked. Build without M4RI to get MIT version
c Using VMTF code by Armin Biere from CaDiCaL
c Using Yalsat by Armin Biere, see Balint et al. Improving implementation of SLS solvers [...], SAT'14
c Using WalkSAT by Henry Kautz, see Kautz and Selman Pushing the envelope: planning, propositional logic, and stochastic search, AAAI'96,
c Using code from 'When Boolean Satisfiability Meets Gauss-E. in a Simplex Way'
c       by C.-S. Han and J.-H. Roland Jiang in CAV 2012. Fixes by M. Soos
c Using CCAnr from 'CCAnr: A Conf. Checking Based Local Search Solver [...]'
c       by Shaowei Cai, Chuan Luo, and Kaile Su, SAT 2015
c CMS compilation env CMAKE_CXX_COMPILER = /usr/bin/c++ | CMAKE_CXX_FLAGS =  -fvisibility=hidden -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -g -Wno-class-memaccess -mpopcnt -msse4.2 -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic | COMPILE_DEFINES =  -DEXTENDED_FEATURES -DUSE_GAUSS -DBOOST_TEST_DYN_LINK -DUSE_ZLIB -DYALSAT_FPU -DUSE_M4RI | STATICCOMPILE = OFF | ONLY_SIMPLE = OFF | Boost_FOUND = TRUE | STATS = OFF | SQLITE3_FOUND = FALSE | ZLIB_FOUND = TRUE | VALGRIND_FOUND =  | ENABLE_TESTING = OFF | M4RI_FOUND = TRUE | NOM4RI = OFF | SLOW_DEBUG = OFF | ENABLE_ASSERTIONS = ON | PYTHON_EXECUTABLE = PYTHON_EXECUTABLE-NOTFOUND | PYTHON_LIBRARY = PYTHON_LIBRARY-NOTFOUND | PYTHON_INCLUDE_DIRS =  | MY_TARGETS =  | LARGEMEM = OFF | LIMITMEM = OFF | BREAKID_LIBRARIES =  | BREAKID-VER = . | BOSPHORUS_LIBRARIES =  | BOSPH-VER = . | compilation date time = Oct 29 2020 17:34:11
c CMS compiled with gcc version 9.3.0
c executed with command line: approxmc --sparse 1 -s 03 /experiments/results/rangesum03.c/03/counterSharp/ash.dimacs
c -- header says num vars:            647
c -- header says num clauses:         751
c WARNING: Empty line at line number 799 -- this is not part of the DIMACS specifications (http://www.satcompetition.org/2009/format-benchmarks2009.html). Ignoring.
c -- clauses added: 751
c -- xor clauses added: 0
c -- vars added 647
c [appmc] Sampling set size: 96
c [appmc] Sampling set: 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
c [sparse] Using match: 1 sampling set size: 96 prev end inclusive is: 50 this end inclusive is: 100 next end inclusive is: 150 sampl size: 96
c [appmc] threshold set to 80 sparse: 1
c [appmc] Starting up, initial measurement
c [appmc] Checking if there are at least threshold+1 solutions...
c [appmc] simplifying
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 0
c [appmc] Starting at hash count: 1
c [appmc] [    0.00 ] round:  0 hashes:      1
c [appmc] [    0.00 ] bounded_sol_count looking for   81 solutions -- hashes active: 1
c [appmc] [    0.01 ] round:  0 hashes:      2
c [appmc] [    0.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 2
c [appmc] [    0.01 ] round:  0 hashes:      4
c [appmc] [    0.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 4
c [appmc] [    0.01 ] round:  0 hashes:      8
c [appmc] [    0.01 ] bounded_sol_count looking for   81 solutions -- hashes active: 8
c [appmc] [    0.02 ] round:  0 hashes:     16
c [appmc] [    0.02 ] bounded_sol_count looking for   81 solutions -- hashes active: 16
c [appmc] [    0.03 ] round:  0 hashes:     32
c [appmc] [    0.03 ] bounded_sol_count looking for   81 solutions -- hashes active: 32
c [appmc] [    0.04 ] round:  0 hashes:     64
c [appmc] [    0.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 64
c [appmc] [    0.04 ] round:  0 hashes:     48
c [appmc] [    0.04 ] bounded_sol_count looking for   81 solutions -- hashes active: 48
c [appmc] [    0.06 ] round:  0 hashes:     56
c [appmc] [    0.06 ] bounded_sol_count looking for   81 solutions -- hashes active: 56
c [appmc] [    0.07 ] round:  0 hashes:     60
c [appmc] [    0.07 ] bounded_sol_count looking for   81 solutions -- hashes active: 60
c [appmc] [    0.08 ] round:  0 hashes:     58
c [appmc] [    0.08 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [    0.09 ] round:  0 hashes:     57
c [appmc] [    0.09 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [    0.10 ] round:  1 hashes:     58
c [appmc] [    0.10 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [    0.12 ] round:  1 hashes:     57
c [appmc] [    0.12 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [    0.14 ] round:  2 hashes:     58
c [appmc] [    0.14 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [    0.16 ] round:  2 hashes:     57
c [appmc] [    0.16 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [    0.17 ] round:  3 hashes:     58
c [appmc] [    0.17 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [    0.20 ] round:  3 hashes:     57
c [appmc] [    0.20 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [    0.22 ] round:  4 hashes:     58
c [appmc] [    0.22 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [    0.25 ] round:  4 hashes:     57
c [appmc] [    0.25 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [    0.27 ] round:  5 hashes:     58
c [appmc] [    0.27 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [    0.31 ] round:  5 hashes:     57
c [appmc] [    0.31 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [    0.33 ] round:  6 hashes:     58
c [appmc] [    0.33 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [    0.37 ] round:  6 hashes:     57
c [appmc] [    0.37 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [    0.39 ] round:  7 hashes:     58
c [appmc] [    0.39 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [    0.44 ] round:  7 hashes:     57
c [appmc] [    0.44 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] simplifying
c [appmc] [    0.46 ] round:  8 hashes:     58
c [appmc] [    0.46 ] bounded_sol_count looking for   81 solutions -- hashes active: 58
c [appmc] [    0.51 ] round:  8 hashes:     57
c [appmc] [    0.51 ] bounded_sol_count looking for   81 solutions -- hashes active: 57
c [appmc] FINISHED ApproxMC T: 0.52 s
c [appmc] Number of solutions is: 64*2**58
s mc 18446744073709551616
